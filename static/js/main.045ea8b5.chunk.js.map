{"version":3,"sources":["actions/QuestionActions.ts","actions/AnswerActions.ts","reducers/questionReducer.ts","reducers/answerReducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/QuestionAnswers.tsx","components/QuestionForm.tsx","components/QuestionList.tsx","containers/QuestionList.tsx","components/App.tsx","components/AnswerForm.tsx","components/Answers.tsx","containers/Answers.tsx","components/Questions.tsx","containers/Questions.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","getQuestion","questionId","dispatch","a","async","getQuestionFromLocalStorage","response","type","GET_QUESTION","question","data","results","console","error","getQuestionGroupFromLocalStorage","Promise","resolve","reject","setTimeout","questionGroups","undefined","questions","find","title","text","words","answers","initialQuestionState","loading","adding","setAdding","SET_ADDING","err","getAnswersFromLocalStorage","addAnswerToLocalStorage","answer","answerId","options","initialAnswerState","rootReducer","combineReducers","questionState","state","action","GET_ALL_QUESTIONS","section","split","answerState","GET_ALL_ANSWERS","Math","max","map","ADD_ANSWER","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","filter","length","React","QuestionAnswers","questionAnswers","QuestionForm","formik","useFormik","enableReinitialize","initialValues","email","validationSchema","Yup","required","onSubmit","values","alert","JSON","stringify","handleSubmit","htmlFor","id","name","handleChange","handleBlur","touched","errors","QuestionList","style","border","borderRadius","padding","marginTop","joinAnswers","answerIds","includes","connect","store","App","textAlign","AnswerForm","add","onClick","cancel","Answers","addAnswer","Questions","questionGroup","paddingBottom","createStore","applyMiddleware","thunk","ReactDOM","to","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.045ea8b5.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup, IQuestionState } from '../reducers/questionReducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n  GET_QUESTION = 'GET_QUESTION',\r\n  GET_ANSWERS = 'GET_ANSWERS'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IQuestionGetAllAction {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGetQuestion {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IQuestionGetAllAction | IGetQuestion;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IQuestionGetAllAction>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGetQuestion>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': questionGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of questionGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }  \r\n\r\n  const questionGroups: IQuestionGroup[] = [\r\n\t{\r\n\t\t title: 'General settings',\r\n\t\t questions: [\r\n\t\t\t  {\r\n\t\t\t\t\tquestionId: 11,\r\n\t\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t  }\r\n\t\t ]\r\n\t}, {\r\n\t\t title: 'Taxes',\r\n\t\t questions: [\r\n\t\t\t  {\r\n\t\t\t\t\tquestionId: 21,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t  }, {\r\n\t\t\t\t\tquestionId: 22,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t  }\r\n\t\t ]\r\n\t}, {\r\n\t\t title: 'Client settings',\r\n\t\t questions: [\r\n\t\t\t{\r\n\t\t\t\tquestionId: 31,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 32,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 33,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 34,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t ]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from '../reducers/answerReducer';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  SET_ADDING = 'SET_ADDING'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IAnswerGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\n export interface IGetAnswer {\r\n\t type: AnswerActionTypes.GET_ANSWER;\r\n\t answer: IAnswer;\r\n }\r\n\r\n export interface ISetAdding {\r\n\ttype: AnswerActionTypes.SET_ADDING;\r\n\tadding: boolean;\r\n}\r\n\r\n export interface IAddAnswer {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IAnswerGetAll | IGetAnswer | IAddAnswer | ISetAdding;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAnswerGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const setAdding: ActionCreator<\r\n  ThunkAction<any, IAnswerState, null, ISetAdding>\r\n> = (adding: boolean) => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.SET_ADDING,\r\n        adding: adding\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const addAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAddAnswer>\r\n> = (answer: IAnswer) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await addAnswerToLocalStorage(answer); \r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER,\r\n        answer: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': answers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\n  const addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': answer\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\n  const answers: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\toptions : []\r\n\t}\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n} from '../actions/QuestionActions';\r\n\r\n// import { IAnswer } from './answerReducer'\r\n\r\n// Define the Question type\r\nexport interface IQuestion {\r\n\tquestionId: number,\r\n\ttext: string,\r\n\twords?: string[],\r\n\tanswers: number[]\r\n}\r\n\r\nexport interface IQuestionGroup {\r\n\ttitle: string;\r\n\tquestions: IQuestion[];\r\n}\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  adding: boolean\r\n}\r\n\r\n// Define the initial state\r\nconst initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tadding: false\r\n};\r\n\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\t\t\t \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n} from '../actions/AnswerActions';\r\n\r\n\r\n// Define the Answer State\r\nexport interface IAnswer {\r\n\tanswerId: number, \r\n\ttext: string;\r\n\toptions?: string[]\r\n}\r\n\r\nexport interface IAnswerState {\r\n\treadonly answers: IAnswer[];\r\n\treadonly answer?: IAnswer;\r\n\tloading: boolean;\r\n\tadding: boolean;\r\n}\r\n\r\n // Define the initial state\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tadding: false,\r\n };\r\n \r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n      return {\r\n        ...state,\r\n        answers: action.answers,\r\n      };\r\n\t}    \r\n   case AnswerActionTypes.SET_ADDING: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  adding: action.adding,\r\n        answer: { answerId: Math.max(...state.answers.map(a => a.answerId)) + 1, text:  ''}\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n        ...state,\r\n        answers: [...state.answers, action.answer]\r\n      };\r\n\t}    \r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../reducers/questionReducer';\r\n\r\nimport {\r\n\tanswerReducer,\r\n\tIAnswerState,\r\n } from '../reducers/answerReducer';\r\n \r\n \r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../reducers/questionReducer'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(section => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\ttitle: section.title,\r\n\t\t\t\t\t\tquestions: section\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\n\r\nimport { IQuestion } from '../reducers/questionReducer';\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[]\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n    const { questionAnswers } = props;  // question, \r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length >0 && \r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td key={answer.answerId} className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>edit</td>\r\n\t\t\t\t\t\t\t\t<td>remove</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../reducers/questionReducer';\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n }\r\n\r\nexport const QuestionForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n      text: props.question.text,\r\n      answers: props.question.answers,\r\n      email: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: values => {\r\n      alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers question={props.question} questionAnswers={props.questionAnswers} />\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\n\r\n// import { IAppState } from '../store/Store';\r\n\r\nimport { IQuestion, IQuestionGroup } from '../reducers/questionReducer';\r\n\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\nimport { AutoSuggest } from './AutoSuggest';\r\nimport { QuestionForm } from './QuestionForm'\r\n\r\n// import Answers from './Answers'\r\n\r\n// Create the containers interface\r\ninterface IProps {\r\n\tquestionGroups: IQuestionGroup[];\r\n\tquestion?: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tanswers: IAnswer[]\r\n}\r\n\r\n// class QuestionList extends React.Component<IProps> {\r\nconst QuestionList: React.FC<IProps> = (props: IProps) => {\r\n    const { questionGroups, question, questionAnswers, onSelectQuestion, answers } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm question={question} questionAnswers={questionAnswers} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionList\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../store/Store';\r\nimport { IQuestion } from '../reducers/questionReducer'\r\nimport { IAnswer } from '../reducers/answerReducer'\r\n\r\n// import { IQuestion } from '../reducers/questionReducer';\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  getQuestion} from '../actions/QuestionActions'  // getAllQuestions, IGetQuestion\r\n\r\nimport QuestionList from '../components/QuestionList'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t questionGroups: store.questionState.questionGroups,\r\n\t question: store.questionState.question,\r\n\t questionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t answers: store.answerState.answers\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);","import * as React from 'react';\nimport '../App.css';\n\nimport QuestionList from '../containers/QuestionList';\n\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <QuestionList />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tadding: boolean;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tadd: (answer: IAnswer) => void;\r\n }\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.add(values)\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"answerId\"></label>\r\n      <input\r\n        id=\"answerId\"\r\n        name=\"answerId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answerId}\r\n      />\r\n      {formik.touched.answerId && formik.errors.answerId ? (\r\n        <div>{formik.errors.answerId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { IAnswer } from '../reducers/answerReducer';\r\nimport { AnswerForm } from './AnswerForm'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer, \r\n\tadding: boolean,\r\n\tsetAdding: (adding: boolean) => void,\r\n\tcancel: () => void;\r\n\tadd: (answer: IAnswer) => void;\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n\t// let { slug } = useParams();\r\n\tconst { answers, answer, adding, setAdding, cancel, add } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{/* slug: {slug} */}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>edit</td>\r\n\t\t\t\t\t\t\t\t\t<td>remove</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<button onClick={() => setAdding(true)}>Add new</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{adding &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} adding={adding} cancel={cancel} add={add} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Answers\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../store/Store';\r\n\r\nimport { AnswerActions,  setAdding, addAnswer } from '../actions/AnswerActions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../reducers/answerReducer'\r\n\r\nimport Answers from '../components/Answers'\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t answers: store.answerState.answers,\r\n\t answer: store.answerState.answer!,\r\n\t adding: store.answerState.adding\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\tsetAdding: (adding: boolean) => dispatch<any>(setAdding(adding)),\r\n\t\tcancel: () => dispatch<any>(setAdding(false)),\r\n\t\tadd: (answer: IAnswer) => dispatch<any>(addAnswer(answer))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import * as React from 'react';\r\n\r\n// import { IAppState } from '../store/Store';\r\n\r\nimport { IQuestion, IQuestionGroup } from '../reducers/questionReducer';\r\n\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\nimport { AutoSuggest } from './AutoSuggest';\r\nimport { QuestionForm } from './QuestionForm'\r\n\r\n// import Answers from './Answers'\r\n\r\n// Create the containers interface\r\ninterface IProps {\r\n\tquestionGroups: IQuestionGroup[];\r\n\tquestion?: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tanswers: IAnswer[]\r\n}\r\n\r\nconst Questions: React.FC<IProps> = (props: IProps) => {\r\n    const { questionGroups, question, questionAnswers, onSelectQuestion, answers } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm question={question} questionAnswers={questionAnswers} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups &&\r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.title} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>{questionGroup.title}</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<div key={question.questionId} className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{question.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{/* <h3>All Answers</h3>\r\n\t\t\t\t\t<Answers answers={answers} /> */}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Questions\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../store/Store';\r\nimport { IQuestion } from '../reducers/questionReducer'\r\nimport { IAnswer } from '../reducers/answerReducer'\r\n\r\n// import { IQuestion } from '../reducers/questionReducer';\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  getQuestion} from '../actions/QuestionActions'  // getAllQuestions, IGetQuestion\r\n\r\nimport Questions from '../components/Questions'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t questionGroups: store.questionState.questionGroups,\r\n\t question: store.questionState.question,\r\n\t questionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t answers: store.answerState.answers\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\n\nimport { Provider } from 'react-redux';\n\nimport { Store } from 'redux';\n\nimport configureStore, { IAppState } from './store/Store';\nimport { getAllQuestions } from './actions/QuestionActions';\nimport { getAllAnswers } from './actions/AnswerActions';\n\nimport './index.css';\nimport App from './components/App';\nimport Answers from './containers/Answers'\nimport Questions from './containers/Questions'\n\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n\nconst Root: React.SFC<IProps> = props => {\n\treturn (\n\t\t<Provider store={props.store}>\n\t\t\t<Router>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Supporter</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"push-right\">\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Sign In</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\t\t\t\t\t\n\t\t\t\t</nav>\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<App />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/questions\">\n\t\t\t\t\t\t\t<Questions />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\n\t\t\t\t\t\t\t<Answers />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t{/* <Route\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\n\t\t\t\t\t\t\trender={({ match }) => {\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\t\n\t\t\t</Router>\n\t\t</Provider>\n\t);\n};\n\n\n\n// Generate the store\nconst store = configureStore();\nstore.dispatch(getAllQuestions());\nstore.dispatch(getAllAnswers());\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);"],"sourceRoot":""}
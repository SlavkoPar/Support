{"version":3,"sources":["Questions/actions.ts","Answers/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/AutoSuggestAnswer.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","CRUD/Student/actions.ts","Questions/components/GroupRow.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","formik/theme.js","Answers/components/Form.tsx","Answers/components/List.tsx","Answers/containers/List.tsx","CRUD/Student/useStudent.tsx","CRUD/Student/reducer.ts","CRUD/Student/components/StudentList.tsx","CRUD/Student/components/MyForm.tsx","CRUD/Student/components/StudentForm.tsx","CRUD/Student/StudentPage.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","isWebStorageSupported","window","reloadQuestionsFromLocalStorage","sQuestions","questionGroups","JSON","parse","storageQuestionsByGroups","getQuestion","questionId","dispatch","a","async","getQuestionFromLocalStorage","response","type","GET_QUESTION","question","data","results","console","error","delay","Promise","resolve","reject","setTimeout","undefined","questions","find","getQuestionGroupsFromLocalStorage","updateGroupFromLocalStorage","group","SUPPORT_QUESTIONS","storageQuestionsByGroupsDemo","groupId","title","text","words","answers","initialQuestion","initialQuestionGroup","initialQuestionState","loading","formMode","groupIdEditing","getAnswersFromLocalStorage","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","SUPPORT_ANSWERS","storageAnswersDemo","options","initialAnswer","initialAnswerState","rootReducer","combineReducers","questionState","state","action","GET_ALL_QUESTIONS","section","split","ADD_QUESTION","EDIT_QUESTION","STORE_QUESTION","map","g","q","CANCEL_QUESTION","REMOVE_QUESTION","filter","REMOVE_QUESTION_ANSWER","ASSIGN_QUESTION_ANSWER","ADD_GROUP","EDIT_GROUP","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","STORE_QUESTIONS_TO_LOCAL_STORAGE","localStorage","setItem","stringify","answerState","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","length","Math","max","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","STORE_ANSWERS_TO_LOCAL_STORAGE","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","AutoSuggestAnswer","assignQuestionAnswer","answersUnassigned","QuestionAnswers","questionAnswers","canEdit","removeQuestionAnswer","includes","onClick","stopPropagation","preventDefault","icon","faWindowClose","color","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","handleBlur","disabled","style","width","touched","errors","multiple","cancel","DisplayForm","edit","remove","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","parseInt","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","StudentActionTypes","QuestionRow","hoverRef","toString","ref","faEdit","GroupRow","questionGroup","editGroup","removeGroup","QuestionsPage","add","addGroup","storeGroup","inputEl","select","focus","textAlign","paddingBottom","target","defaultValue","marginLeft","border","borderRadius","padding","marginTop","PromoterPage","joinAnswers","answerIds","mapStateToProps","store","ownProps","mapDispatchToProps","questionGroupId","groups","questionIdMax","editQuestion","removeQuestion","storeQuestion","err","connect","promoter","App","COLORS","require","palx","fromMode","AnswerForm","height","background","boxShadow","maxWidth","margin","Answers","useParams","slug","usedAnswers","getUsedAnswers","concat","editAnswer","removeAnswer","storeAnswer","StudentContext","setLoading","b","STUDENT_SET_LOADING","entityId","STUDENT_EDIT","student","localStorageStudents","STUDENT_REMOVE","firstName","lastName","email","url","localStorageSave","sStudents","students","initialStudent","reducer","STUDENT_GET_ALL","STUDENT_GET","STUDENT_ADD","STUDENT_STORE","STUDENT_CANCEL","Error","initialState","StudentProvider","useReducer","createContext","Provider","useStudent","useContext","StudentList","list","s","getAll","href","MyForm","StudentForm","StudentPage","cols","base","black","Object","keys","forEach","css","global","borderColor","outline","createStore","applyMiddleware","thunk","loaded","getItem","sAnswers","ReactDOM","to","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.4bbe6e34.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup } from './types';\r\nimport { IQuestionState } from './reducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\tASSIGN_QUESTION_ANSWER = 'ASSIGN_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSTORE_QUESTIONS_TO_LOCAL_STORAGE = 'STORE_QUESTIONS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tquestion: IQuestion\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroup: IQuestionGroup\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\nexport interface IStoreQuestionsToLocalStorage {\r\n\ttype: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// question answers\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\nexport interface IAssignQuestionAnswer {\r\n\ttype: QuestionActionTypes.ASSIGN_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\t\t\t\t\tIRemoveQuestionAnswer | IAssignQuestionAnswer |\r\n\t\t\t\t\tIStoreQuestionsToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tlet loaded = false;\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t// console.log('localStorage:', sQuestions);\r\n\t\t\t\t// const questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\t\t\t\tstorageQuestionsByGroups = JSON.parse(sQuestions)\r\n\t\t\t\tloaded = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!loaded)\r\n\t\t\tstorageQuestionsByGroups = storageQuestionsByGroupsDemo\r\n\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: JSON.parse(JSON.stringify(response.data.results)),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const reloadQuestionsFromLocalStorage = (sQuestions: string) => {\r\n\tconst questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\tstorageQuestionsByGroups = questionGroups;\r\n}\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet questionIdMax = 0;\r\n\t\tfor (let g of groups) {\r\n\t\t\tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\tif (max > questionIdMax)\r\n\t\t\t\tquestionIdMax = max;\r\n\t\t}\r\n\r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_QUESTION,\r\n\t\t  groupId: groupId, \r\n        questionId: questionIdMax + 1\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId); \r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_QUESTION,\r\n        question: response.data.results // answers.find(a => a.questionId === questionId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_QUESTION,\r\n        groupId: groupId,\r\n        questionId: questionId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t  groupId: groupId,\r\n        questionId: questionId,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const assignQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ASSIGN_QUESTION_ANSWER,\r\n\t\t  groupId: groupId,\r\n        questionId: questionId,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const storeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion: question,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of storageQuestionsByGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 100)\r\n  \t })\r\n  }  \r\n\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAddGroup>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet max = Math.max(...groups.map(g => g.groupId))\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_GROUP,\r\n\t\t  groupId: max + 1, \r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tconst group = groups.find(g => g.groupId === groupId)\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_GROUP,\r\n        group: JSON.parse(JSON.stringify(group))\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after update, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_GROUP,\r\n        groupId: groupId\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait updateGroupFromLocalStorage(group); \r\n\t\tdispatch({\r\n\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\tgroup\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageQuestionsByGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n\t})\r\n}\r\n\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS' \r\n\r\n \r\n// localStorage.removeItem(SUPPORT_QUESTIONS);\r\n  \r\nexport let storageQuestionsByGroups: IQuestionGroup[] = [\r\n]\r\n\r\nexport const storageQuestionsByGroupsDemo: IQuestionGroup[] = [\r\n\t{\r\n\t\tgroupId: 11,\r\n\t\ttitle: 'General settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 11,\r\n\t\t\t\tquestionId: 101,\r\n\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t}\r\n\t\t ]\r\n\t\t}, {\r\n\t\t\tgroupId: 22,\r\n\t\t\ttitle: 'Taxes',\r\n\t\t\tquestions: [\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 201,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t\t}, {\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 202,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}, {\r\n\t\t\tgroupId: 33,\r\n\t\t\ttitle: 'Client settings',\r\n\t\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 301,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 302,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 303,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 304,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t\t]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n  // localSTorage\r\n  STORE_ANSWERS_TO_LOCAL_STORAGE = 'STORE_ANSWERS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\nexport interface IStoreAnswersToLocalStorage {\r\n\ttype: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIStoreAnswersToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\tif (sAnswers !== null) {\r\n\t\t\t\t// console.log('localStorage:', sAnswers);\r\n\t\t\t\tconst answers: IAnswer[] = JSON.parse(sAnswers);\r\n\t\t\t\tanswers.map(g => storageAnswers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\r\n\t\t}\r\n\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS' \r\n\r\nconst storageAnswers: IAnswer[] = [\r\n]\r\n\r\nconst storageAnswersDemo: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 115,\r\n\t\ttext: 'Do whatever you want!',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 116,\r\n\t\ttext: 'Jump through the window.',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n  SUPPORT_QUESTIONS,\r\n  reloadQuestionsFromLocalStorage\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup } from './types'\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: []\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  formMode: string;\r\n  groupIdEditing: number;\r\n}\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId: action.questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question: {...action.question}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  question: undefined,\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\t return {\r\n\t\t\t   ...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t{ ...q, answers: [...q.answers] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...q, answers: q.answers.filter(answerId => answerId !== action.answerId) }\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t\tcase QuestionActionTypes.ASSIGN_QUESTION_ANSWER: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t\t questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t  { ...g, questions: [...g.questions] } \r\n\t\t\t\t  : \r\n\t\t\t\t  { ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t  { ...q, answers: [...q.answers] } \r\n\t\t\t\t\t  : \r\n\t\t\t\t\t  { ...q, answers: [...q.answers, action.answerId] }\r\n\t\t\t\t  )\r\n\t\t\t  })\r\n\t\t  }\r\n\t  }   \r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: action.groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId: action.groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: action.group.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\tcase QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE: {\r\n\t\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(state.questionGroups));\r\n\t\t\treloadQuestionsFromLocalStorage(JSON.stringify(state.questionGroups));\r\n\t\t\treturn state;\r\n\t\t}   \t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n  SUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport {IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: []\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\treturn {\r\n        ...state,\r\n        answers: action.answers.map(answer => { return {...answer, words: answer.text.split(' ')} }),\r\n      };\r\n\t} \r\n \tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \t\r\n   case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: { ...action.answer, words: action.answer.text.split(' ')}\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tanswers = [...state.answers, { ...action.answer, words:  action.answer.text.split(' ')}]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? { ...action.answer, words:  action.answer.text.split(' ')} : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\treturn state;\r\n\t}   \t\r\n\r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\tanswerReducer } from '../Answers/reducer';\r\nimport {\tIAnswerState } from '../Answers/types';\r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IAnswer }  from '../Answers/types'\r\nimport './AutoSuggest.css'\r\nimport { IQuestion } from '../Questions/types';\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IAnswer> };\r\n\r\ninterface IProps {\r\n\tanswersUnassigned: IAnswer[], \r\n\tquestion: IQuestion,\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n}\r\n\r\nexport class AutoSuggestAnswer extends React.Component<IProps, any> {\r\n\r\n\tstate: any;\r\n\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={false}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'contact'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IAnswer>): void {\r\n\t\t const answer: IAnswer = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.answerId} (${question.text}).`);\r\n\t\t this.props.assignQuestionAnswer(\r\n\t\t\t this.props.question.groupId,\r\n\t\t\t this.props.question.questionId, \r\n\t\t\t answer.answerId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IAnswer, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IAnswer>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IAnswer[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\treturn this.props.answersUnassigned.filter(answer => this.anyWord(valueWordRegex, answer.words!))\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IAnswer) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\nimport { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tanswers?: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tremoveQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void,\r\n\tassignQuestionAnswer?: (groupId: number, questionId: number, answerId: number) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n\t const { question, questionAnswers, answers, canEdit, formMode, removeQuestionAnswer, assignQuestionAnswer } = props;  // question, \r\n\t const answersUnassigned = answers?.filter(a => !question.answers.includes(a.answerId))\r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length > 0 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Answers</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer!(question.groupId, question.questionId, answer.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && formMode !== 'display' && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<AutoSuggestAnswer question={question} answersUnassigned={answersUnassigned!} assignQuestionAnswer={assignQuestionAnswer!} />\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tcancel: () => void;\r\n\tsaveForm: (question: IQuestion, formMode: string) => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void; \t\r\n }\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n  return (\r\n\t  <>\r\n   \t<form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  multiple\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit && \r\n\t\t\t<button onClick={() => props.cancel()}>Cancel</button>}\r\n\t\t{ props.canEdit && \r\n      \t<button type=\"submit\">Save</button>}\r\n    </form>\r\n\r\n\t\t<br />\r\n\t\t<QuestionAnswers \r\n\t\t\tquestion={props.question} \r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tanswers={props.answers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t\tremoveQuestionAnswer={props.removeQuestionAnswer}\r\n\t\t\tassignQuestionAnswer={props.assignQuestionAnswer}\r\n\t\t/>\t \r\n\t\t</>\r\n  );\r\n};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tanswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tedit: () => void;\r\n\tremove: () => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void;\r\n\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void; \t\r\n\r\n }\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers\r\n\t\t\tquestion={props.question}\r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t/>\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\r\n    </form>\r\n  );\r\n};","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tid: number;\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ id: 0, isHovered: false});\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = (id: string) => setValue({ id: parseInt(id), isHovered: true});\r\n\tconst handleMouseOut = (id: string) => setValue({ id: parseInt(id), isHovered: false});\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver(node.id));\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut(node.id));\r\n \r\n\t\t\treturn () => {\r\n\t\t\t  node.removeEventListener('mouseenter', () => handleMouseOver(node.id));\r\n\t\t\t  node.removeEventListener('mouseleave', () => handleMouseOut(node.id));\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\r\n   return (\r\n\t\t<div id={question.questionId.toString()} ref={hoverRef} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === question.questionId &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Answer\" onClick={() => edit(question.groupId, question.questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === question.questionId &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(question.groupId, question.questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import { IStudent } from \"./types\";\r\n\r\nexport enum StudentActionTypes {\r\n\tSTUDENT_GET_ALL = 'STUDENT_GET_ALL',\r\n\tSTUDENT_SET_LOADING = 'STUDENT_SET_LOADING',\r\n\tSTUDENT_ADD = 'STUDENT_ADD',\r\n\tSTUDENT_GET = 'STUDENT_GET',\r\n  \tSTUDENT_EDIT = 'STUDENT_EDIT',\r\n\tSTUDENT_REMOVE = 'STUDENT_REMOVE',\r\n  \tSTUDENT_STORE = 'STUDENT_STORE',\r\n\tSTUDENT_CANCEL = 'STUDENT_CANCEL',\r\n}\r\n\r\nexport interface IStudentGetAll {\r\n\ttype: StudentActionTypes.STUDENT_GET_ALL;\r\n\tstudents: IStudent[]\r\n}\r\n\r\nexport interface ISetLoading {\r\n\ttype: StudentActionTypes.STUDENT_SET_LOADING;\r\n\tloading: boolean\r\n}\r\n\r\nexport interface IStudentGet {\r\n\ttype: StudentActionTypes.STUDENT_GET;\r\n\tstudent: IStudent\r\n}\r\n\r\nexport interface IStudentAdd {\r\n\ttype: StudentActionTypes.STUDENT_ADD;\r\n\tentityId: number;\r\n}\r\n\r\nexport interface IStudentEdit {\r\n\ttype: StudentActionTypes.STUDENT_EDIT;\r\n\tstudent: IStudent;\r\n}\r\n\r\nexport interface IStudentRemove {\r\n\ttype: StudentActionTypes.STUDENT_REMOVE;\r\n\tentityId: number;\r\n}\r\n\r\nexport interface IStudentStore {\r\n\ttype: StudentActionTypes.STUDENT_STORE;\r\n\tstudent: IStudent\r\n}\r\n\r\nexport interface IStudentCancel {\r\n\ttype: StudentActionTypes.STUDENT_CANCEL;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type StudentActions = IStudentGetAll | IStudentGet | ISetLoading | \r\n\t\t\t\t\tIStudentAdd | IStudentEdit | IStudentRemove | \r\n\t\t\t\t\tIStudentStore | IStudentCancel;\r\n\r\n\r\nexport const getAll = () : IStudentGetAll => { \r\n\tconst list = localStorageStudents.map(s => { return {...s, name: s.firstName.trim() + ' ' + s.lastName.trim() } })\r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_GET_ALL,\r\n\t\tstudents: [...list]\r\n\t}\r\n}\r\n\r\nexport const get = (entityId: number) : IStudentGet => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_GET,\r\n\t\tstudent: localStorageStudents.find(e => e.entityId === entityId)!\r\n\t}\r\n}\r\n\r\nexport const add = () : IStudentAdd => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_ADD,\r\n\t\tentityId: localStorageStudents.length === 0 ? \r\n\t\t\t1 : Math.max(...localStorageStudents.map(e => e.entityId)) + 1\r\n\t}\r\n}\r\n\r\n\r\nexport const setLoading = (b: boolean) : ISetLoading => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_SET_LOADING,\r\n\t\tloading: b\r\n\t}\r\n}\r\n\r\nexport const edit = (entityId: number) : IStudentEdit => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_EDIT,\r\n\t\tstudent: localStorageStudents.find(e => e.entityId === entityId)!\r\n\t}\r\n}\r\n\r\nexport const store = (student: IStudent) : IStudentStore => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_STORE,\r\n\t\tstudent\r\n\t}\r\n}\r\n\r\nexport const remove = (entityId: number) : IStudentRemove => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_REMOVE,\r\n\t\tentityId\r\n\t}\r\n}\r\n\r\nexport const cancel = () : IStudentCancel => { \r\n\treturn { \r\n\t\ttype: StudentActionTypes.STUDENT_CANCEL\r\n\t}\r\n}\r\n\r\nlet localStorageStudents: IStudent[] = [\r\n\t{ entityId: 101, name: '', firstName: 'Piter', lastName: 'Fonda',  email: 'piter@gmail.com', url: '/student/'},\r\n\t{ entityId: 102, name: '', firstName: 'Ana', lastName: 'Karenjina', email: 'ana@gmail.com', url: '/student/'},\r\n\t{ entityId: 103, name: '', firstName: 'Jack', lastName: 'Daniels', email: 'jack@gmail.com', url: '/student/'},\r\n\t{ entityId: 104, name: '', firstName: 'Robert', lastName:'De Niro', email: 'robi@gmail.com', url: '/student/'},\r\n]\r\n\r\nexport const localStorageSave = (sStudents: string) => {\r\n\tconst students: IStudent[] = JSON.parse(sStudents);\r\n\tlocalStorageStudents = students\r\n}\r\n\r\n\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div id={questionGroup.groupId.toString()} ref={hoverRef} key={questionGroup.groupId} className=\"name\">\r\n\t\t\t{questionGroup.title}\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === questionGroup.groupId&&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === questionGroup.groupId && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\nimport { getQuestion } from '../actions';\r\n\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tconst { questionGroups, question, questionAnswers, answers, formMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\t\taddGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\t\tremoveQuestionAnswer, assignQuestionAnswer } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n   return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={question.questionId}\r\n\t\t\t\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\tedit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\t const { questionGroups, question, questionAnswers, answers, formMode, onSelectQuestion, cancel, saveForm, canEdit,\r\n\t\tremoveQuestionAnswer, assignQuestionAnswer } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tanswers={answers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\tassignQuestionAnswer={assignQuestionAnswer}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer,\r\n\tassignQuestionAnswer\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tgroupIdEditing: store.questionState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId)),\r\n\r\n\t\tassignQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(assignQuestionAnswer(groupId, questionId, answerId))\r\n\t}\r\n}\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","const palx = require('palx');\r\nexport const BASE_COLOR = '#666ee8';\r\nexport const COLORS = palx(BASE_COLOR);","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\nimport { COLORS } from '../../formik/theme';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nconst Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\tid=\"answerId\"\r\n\t\t\tname=\"answerId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.answerId}\r\n\t\t\tdisabled\r\n\t\t\tstyle={{width: '50px'}}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst color = 'blue';\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n\treturn (\r\n\t\t<div style={{ height: '100%' }} className=\"formik-example formik-example--blue\">\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\theight: '100%',\r\n\t\t\tbackground: COLORS[color][5],\r\n\t\t\tpadding: '4rem 2rem',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tborderRadius: '4px',\r\n\t\t\t\tboxShadow: '0 8px 16px rgba(0,0,0,.2)',\r\n\t\t\t\tbackground: '#fff',\r\n\t\t\t\tmaxWidth: 400,\r\n\t\t\t\tmargin: '0 auto',\r\n\t\t\t\tpadding: '2rem',\r\n\t\t\t}}\r\n\t\t\t>\r\n\t\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t\t\t<Form {...props} />\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</div>\t\r\n\t)\r\n}","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer,\r\n\tusedAnswers: number[],\r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams();\r\n\tslug = ''\r\n\tconst { answers, answer, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"button-edit\"\r\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"Add a new Answer\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => edit(answer.answerId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\t\t\t\tdisabled={props.usedAnswers.includes(answer.answerId)}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"button-remove\"\r\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"Remove Answer\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => remove(answer.answerId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Answers\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Answers from '../components/List'\r\nimport { IQuestionGroup } from '../../Questions/types';\r\n\r\nconst getUsedAnswers = (questionGroups: IQuestionGroup[]) : number[]=> {\r\n\tlet answerIds: number[] = [];\r\n\tfor (let group of questionGroups)\r\n\t\tfor (let question of group.questions)\r\n\t\t\tanswerIds = answerIds.concat(question.answers)\r\n\treturn answerIds;\r\n}\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\tanswers: store.answerState.answers,\r\n\tanswer: store.answerState.answer!,\r\n\tformMode: store.answerState.formMode,\r\n\tusedAnswers: getUsedAnswers(store.questionState.questionGroups)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","\r\nimport React, { createContext, useContext, useReducer, Dispatch } from 'react';\r\nimport { IStudentState } from './types';\r\nimport { reducer } from './reducer';\r\nimport { StudentActions } from './actions';\r\n\r\n\r\nconst initialState: IStudentState = { \r\n\tstudents: [],\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tcanEdit: true\r\n};\r\n\r\n\r\ninterface IStudentContext {\r\n\tstate: IStudentState;\r\n\tdispatch: Dispatch<StudentActions>;\r\n }\r\n\r\n// The standard way to create context. It takes an initial value object\r\nlet StudentContext: React.Context<IStudentContext>;\r\n\r\ninterface IProps {\r\n\tchildren: React.ReactNode\r\n}\r\n\r\nexport const StudentProvider: React.FC<IProps> = ({ children }) => {\r\n\r\n  const [state, dispatch] = useReducer<React.Reducer<IStudentState, StudentActions>>(reducer, initialState);\r\n  \r\n\tif (StudentContext === undefined)\r\n  \t\tStudentContext = createContext<IStudentContext>({ state, dispatch })\r\n\r\n  \treturn (\r\n   \t<StudentContext.Provider value={{ state, dispatch }}>\r\n   \t\t{children}\r\n   \t</StudentContext.Provider>\r\n  \t)\r\n}\r\n\r\nexport const useStudent = () => useContext(StudentContext);","import { IStudentState, IStudent } from './types';\r\n\r\nimport { StudentActions, StudentActionTypes, localStorageSave } from './actions';\r\n\r\nconst initialStudent: IStudent = { \r\n\tentityId: 0, \r\n\tname: '',\r\n\tfirstName: '',\r\n\tlastName: '',\r\n\temail: '',\r\n\turl: ''\r\n};\r\n\r\n\r\nexport const reducer: React.Reducer<IStudentState, StudentActions> = (state, action) =>  {\r\n\tswitch(action.type) {\r\n\r\n\t\tcase StudentActionTypes.STUDENT_GET_ALL:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstudents: action.students,\r\n\t\t\t}\r\n\r\n\t\tcase StudentActionTypes.STUDENT_SET_LOADING:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: action.loading\r\n\t\t\t}\r\n\r\n\t\tcase StudentActionTypes.STUDENT_GET: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tstudent: action.student\r\n\t\t\t};\r\n\t\t}    \r\n\r\n\t\tcase StudentActionTypes.STUDENT_ADD: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tstudent: { \r\n\t\t\t\t\t...initialStudent, \r\n\t\t\t\t\tentityId: action.entityId\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}    \t\r\n\r\n\t\tcase StudentActionTypes.STUDENT_EDIT: \r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tstudent: { ...action.student }\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\tcase StudentActionTypes.STUDENT_REMOVE: {\r\n\t\t\tlocalStorageSave(JSON.stringify(state.students.filter(e => e.entityId !== action.entityId)))\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t\tstudent: undefined,\r\n\t\t\t\tstudents: state.students.filter(e => e.entityId !== action.entityId)\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tcase StudentActionTypes.STUDENT_STORE: {\r\n\t\t\tlet students: IStudent[] = [];\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\tstudents = [...state.students, { ...action.student }]\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstudents = state.students.map(a => a.entityId === action.student.entityId ? { ...action.student } : a)\r\n\t\t\t}\r\n\t\t\tlocalStorageSave(JSON.stringify(students))\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'edit',\r\n\t\t\t\tstudent: { ...action.student },\r\n\t\t\t\tstudents: students\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase StudentActionTypes.STUDENT_CANCEL: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unhandled action type: ${action!.type}`);\r\n\t}\r\n}","import React from \"react\";\r\nimport { useStudent } from \"../useStudent\"\r\nimport { edit, remove, getAll, setLoading, add } from \"../actions\";\r\n\r\ninterface IProps {\r\n\tquery: string\r\n}\r\n\r\nexport const StudentList = (props: IProps) => {\r\n\tconst { state, dispatch } = useStudent();\r\n\r\n\tReact.useEffect(() => {\r\n\t\tdispatch(setLoading(true))\r\n\t\tdispatch(getAll())\r\n\t\tdispatch(setLoading(false))\r\n\t}, [dispatch, props.query]);\r\n\r\n\treturn (\r\n   \t<div>\r\n\t\t\t<h3>Students</h3>\r\n\t\t\t<ul className=\"ul-row\">\r\n\t\t\t\t{state.students.map(({ entityId, name, url, email }) => (\r\n\t\t\t\t\t<li key={entityId}>\r\n\t\t\t\t\t\t<ul className=\"ul-line\">\r\n\t\t\t\t\t\t\t<li>{entityId}</li>\r\n\t\t\t\t\t\t\t<li><a href={url}>{name}</a></li>\r\n\t\t\t\t\t\t\t<li>{email}</li>\r\n\t\t\t\t\t\t\t<li><button onClick={() => dispatch(edit(entityId))}>edit</button></li>\r\n\t\t\t\t\t\t\t<li><button onClick={() => dispatch(remove(entityId))}>remove</button></li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\t\t\r\n\t\t\t<button onClick={() => dispatch(add())}>Add new</button>\t\t\t\r\n\t\t</div>\r\n  )\r\n}","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IStudent } from '../types';\r\n\r\ninterface IFormProps {\r\n\tstudent: IStudent;\r\n\tformMode: string;\r\n\tcanEdit: boolean;\r\n\tcancel: () => void;\r\n\tsaveForm: (student: IStudent) => void;\r\n\tedit: () => void;\r\n\tremove: () => void;\t\r\n }\r\n\r\nexport const MyForm: React.FC<IFormProps> = (props: IFormProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n\t\tcanEdit: props.canEdit,\r\n      entityId: props.student.entityId,\r\n\t\turl: props.student.url,\r\n\t\tfirstName: props.student.firstName,\r\n\t\tlastName: props.student.lastName,\r\n\t\tname: props.student.name,\r\n\t\temail: props.student.email,\r\n   },\r\n   validationSchema: Yup.object({\r\n      firstName: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\tvalues.name = values.firstName.trim() + ' ' + values.lastName.trim()\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"entityId\">Student id</label>\r\n\t\t\t<input\r\n\t\t\tid=\"entityId\"\r\n\t\t\tname=\"entityId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.entityId}\r\n\t\t\tdisabled\r\n\t\t\tstyle={{width: '50px'}}\r\n\t\t\t/>\r\n\t\t\t{formik.touched.entityId && formik.errors.entityId ? (\r\n\t\t\t<div>{formik.errors.entityId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"firstName\">First name</label>\r\n      <input\r\n        id=\"firstName\"\r\n        name=\"firstName\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.firstName}\r\n\t\t  disabled = {props.formMode === 'display'}\r\n      />\r\n      {formik.touched.firstName && formik.errors.firstName ? (\r\n        <div>{formik.errors.firstName}</div>\r\n      ) : null}\r\n\r\n\t\t<label htmlFor=\"lastName\">Last name</label>\r\n      <input\r\n        id=\"lastName\"\r\n        name=\"lastName\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.lastName}\r\n\t\t  disabled = {props.formMode === 'display'}\r\n      />\r\n      {formik.touched.lastName && formik.errors.lastName ? (\r\n        <div>{formik.errors.lastName}</div>\r\n      ) : null}\t\t\r\n\r\n\t\t<label htmlFor=\"lastName\">Email</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.email}\r\n\t\t  disabled = {props.formMode === 'display'}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null}\t\t\r\n\r\n\r\n\t\t{ props.formMode !== 'display' &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      \t<button type=\"submit\">Save</button>\r\n\t\t\t</>\r\n\t\t}\r\n\r\n\t\t{ props.canEdit && props.formMode === 'display' &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\t\t\t\t\r\n\r\n    </form>\r\n  );\r\n};\r\n\r\n","import React from 'react';\r\nimport { useStudent } from '../useStudent';\r\n\r\nimport { cancel, store, edit, remove } from '../actions'\r\nimport { MyForm } from './MyForm';\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport const StudentForm: React.FC<IProps> = (props: IProps) => {\r\n\tconst { state, dispatch } = useStudent();\r\n\tconst { student, formMode, canEdit } = state;\r\n\r\n\tlet title: string = ''\r\n\tswitch (state.formMode) {\r\n\t\tcase 'display':\r\n\t\t\ttitle = 'Student';\r\n\t\t\tbreak;\r\n\t\tcase 'edit':\r\n\t\t\ttitle = 'Edit Student';\r\n\t\t\tbreak;\r\n\t\tcase 'add':\r\n\t\t\ttitle = 'New Student';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"formik-example formik-example--blue\">\r\n\t\t{ student && \r\n\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t<h4 style={{marginTop: 0}}>{title}</h4>\r\n\t\t\t\t<MyForm {...props}\r\n\t\t\t\t\tstudent={student!} \r\n\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\tcancel = {() => dispatch(cancel())}\r\n\t\t\t\t\tsaveForm = { (student) => dispatch(store(student))}\r\n\t\t\t\t\tedit = {() => dispatch(edit(student!.entityId))}\r\n\t\t\t\t\tremove = {() => dispatch(remove(student!.entityId))}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t}\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport { StudentProvider } from \"./useStudent\";\r\nimport { StudentList } from \"./components/StudentList\";\r\nimport { StudentForm } from \"./components/StudentForm\";\r\n\r\ninterface IProps {\r\n}\r\n\r\nexport const StudentPage: React.FC<IProps> = (props: IProps) => {\r\n  return (\r\n    <StudentProvider>\r\n\t\t<div className=\"two-columns\">\r\n\t\t\t<div className=\"a\">\r\n\t\t\t\t<StudentList query=\"all\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"b\">\r\n\t\t\t\t<StudentForm />\r\n\t\t\t</div>\r\n\t\t</div>    \t\t\r\n    </StudentProvider>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { Store } from 'redux';\r\n\r\nimport configureStore, { IAppState } from './store/Store';\r\nimport { getAllQuestions } from './Questions/actions';\r\nimport { getAllAnswers } from './Answers/actions';\r\n\r\nimport './index.css';\r\nimport './App.css';\r\n\r\nimport App from './components/App';\r\nimport Answers from './Answers/containers/List'\r\nimport containers from './Questions/containers/Pages'\r\n\r\n// import { EntityPage } from './CRUD/Generics/EntityPage';\r\nimport { StudentPage } from './CRUD/Student/StudentPage';\r\n\r\nimport './formik/formikStyles.css';\r\nimport { css } from 'glamor';\r\nimport { COLORS } from './formik/theme';\r\nconst { base, black, ...cols } = COLORS;\r\n\r\n// Cool example colors.\r\nObject.keys(cols).forEach(color => {\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit'],\r\n\t.formik-example.formik-example--${color} button.primary`,\r\n\t  {\r\n\t\t background: COLORS[color][5],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:focus,\r\n\t  .formik-example.formik-example--${color} button.primary:focus`,\r\n\t  {\r\n\t\t background: COLORS[color][6],\r\n\t  }\r\n\t);\r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} button[type='submit']:active,\r\n\t  .formik-example.formik-example--${color} button.primary:active`,\r\n\t  {\r\n\t\t background: COLORS[color][7],\r\n\t  }\r\n\t);\r\n \r\n\tcss.global(\r\n\t  `.formik-example.formik-example--${color} input:focus, .formik-example.formik-example--${color} select:focus`,\r\n\t  {\r\n\t\t borderColor: COLORS[color][4],\r\n\t\t boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 0 3px ${COLORS[color][1]}`,\r\n\t\t outline: 'none',\r\n\t  }\r\n\t);\r\n });\r\n\r\n\r\ninterface IProps {\r\n\tstore: Store<IAppState>;\r\n}\r\n\r\nconst Root: React.SFC<IProps> = props => {\r\n\treturn (\r\n\t\t<Provider store={props.store}>\r\n\t\t\t<Router>\r\n\t\t\t\t<nav>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/\">Supporter</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"push-right\">\r\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Sign In</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\t\t\t\t\t\r\n\t\t\t\t</nav>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t\t\t{<App /> }\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/questions\">\r\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\r\n\t\t\t\t\t\t\t<Answers />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{/* <Route\r\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\r\n\t\t\t\t\t\t\trender={({ match }) => {\r\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\r\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/> */}\r\n\t\t\t\t\t\t<Route path=\"/crud\">\r\n\t\t\t\t\t\t\t<StudentPage />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\t\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\n// Generate the store\r\nconst store = configureStore();\r\nstore.dispatch(getAllQuestions());\r\nstore.dispatch(getAllAnswers());\r\n\r\n// Render the App\r\nReactDOM.render(<Root store={store} />, document.getElementById(\r\n  'root'\r\n) as HTMLElement);"],"sourceRoot":""}
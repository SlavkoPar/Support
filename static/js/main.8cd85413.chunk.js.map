{"version":3,"sources":["Questions/actions.ts","Answers/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/QuestionForm.tsx","Questions/components/QuestionList.tsx","Questions/containers/QuestionList.tsx","components/App.tsx","Answers/components/Form.tsx","Answers/components/List.tsx","Answers/containers/List.tsx","Questions/components/Questions.tsx","Questions/containers/Questions.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","getQuestion","questionId","dispatch","a","async","getQuestionFromLocalStorage","response","type","GET_QUESTION","question","data","results","console","error","getQuestionGroupFromLocalStorage","Promise","resolve","reject","setTimeout","questionGroups","undefined","questions","find","title","text","words","answers","initialQuestionState","loading","adding","getAnswersFromLocalStorage","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","options","initialAnswer","initialAnswerState","formMode","rootReducer","combineReducers","questionState","state","action","GET_ALL_QUESTIONS","section","split","answerState","GET_ALL_ANSWERS","ADD_ANSWER","length","Math","max","map","GET_ANSWER","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","filter","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","QuestionAnswers","questionAnswers","canEdit","onClick","icon","faWindowClose","color","QuestionForm","formik","useFormik","enableReinitialize","initialValues","email","validationSchema","Yup","required","onSubmit","values","alert","JSON","stringify","handleSubmit","htmlFor","id","name","handleChange","handleBlur","disabled","touched","errors","QuestionList","style","border","borderRadius","padding","marginTop","joinAnswers","answerIds","includes","connect","store","App","textAlign","AnswerForm","fromMode","saveForm","readOnly","cancel","Answers","useParams","slug","add","edit","remove","faEdit","err","editAnswer","removeAnswer","storeAnswer","Questions","questionGroup","paddingBottom","createStore","applyMiddleware","thunk","ReactDOM","to","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.8cd85413.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup, IQuestionState } from './reducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n  GET_QUESTION = 'GET_QUESTION',\r\n  GET_ANSWERS = 'GET_ANSWERS'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IQuestionGetAllAction {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGetQuestion {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IQuestionGetAllAction | IGetQuestion;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IQuestionGetAllAction>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGetQuestion>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': questionGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of questionGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }  \r\n\r\n  const questionGroups: IQuestionGroup[] = [\r\n\t{\r\n\t\t title: 'General settings',\r\n\t\t questions: [\r\n\t\t\t  {\r\n\t\t\t\t\tquestionId: 11,\r\n\t\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t  }\r\n\t\t ]\r\n\t}, {\r\n\t\t title: 'Taxes',\r\n\t\t questions: [\r\n\t\t\t  {\r\n\t\t\t\t\tquestionId: 21,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t  }, {\r\n\t\t\t\t\tquestionId: 22,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t  }\r\n\t\t ]\r\n\t}, {\r\n\t\t title: 'Client settings',\r\n\t\t questions: [\r\n\t\t\t{\r\n\t\t\t\tquestionId: 31,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 32,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 33,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 34,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t ]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './reducer';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IAnswerGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\n export interface IGetAnswer {\r\n\t type: AnswerActionTypes.GET_ANSWER;\r\n\t answer: IAnswer;\r\n }\r\n\r\n export interface IAddAnswer {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\n export interface IEditAnswer {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemoveAnswer {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IStoreAnswer {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface ICancelAnswer {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IAnswerGetAll | IGetAnswer | \r\n\tIAddAnswer | IEditAnswer | IRemoveAnswer | \r\n\tIStoreAnswer | ICancelAnswer;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAnswerGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAnswerGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAnswerGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAnswerGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAddAnswer>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst storageAnswers: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\toptions : []\r\n\t}\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n} from './actions';\r\n\r\n// import { IAnswer } from './answerReducer'\r\n\r\n// Define the Question type\r\nexport interface IQuestion {\r\n\tquestionId: number,\r\n\ttext: string,\r\n\twords?: string[],\r\n\tanswers: number[]\r\n}\r\n\r\nexport interface IQuestionGroup {\r\n\ttitle: string;\r\n\tquestions: IQuestion[];\r\n}\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  adding: boolean\r\n}\r\n\r\n// Define the initial state\r\nconst initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tadding: false\r\n};\r\n\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\t\t\t \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n} from './actions';\r\n\r\n\r\n// Define the Answer State\r\nexport interface IAnswer {\r\n\tanswerId: number, \r\n\ttext: string;\r\n\toptions?: string[]\r\n}\r\n\r\nexport interface IAnswerState {\r\n\treadonly answers: IAnswer[];\r\n\treadonly answer?: IAnswer;\r\n\tloading: boolean;\r\n\tformMode: string;\r\n}\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\toptions: []\r\n };\r\n\r\n\r\n\r\n // Define the initial state\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n };\r\n \r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n      return {\r\n        ...state,\r\n        answers: action.answers,\r\n      };\r\n\t} \r\n   case AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n   case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tanswers = [...state.answers, action.answer]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? action.answer : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}    \r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\r\n\tanswerReducer,\r\n\tIAnswerState,\r\n } from '../Answers/reducer';\r\n \r\n \r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/reducer'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(section => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\ttitle: section.title,\r\n\t\t\t\t\t\tquestions: section\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../reducer';\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tcanEdit: boolean\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n    const { questionAnswers, canEdit } = props;  // question, \r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length > 0 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t{ canEdit && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => {}}>  {/* remove(answer.answerId) */}\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t{ canEdit && \r\n\t\t\t\t\t<button className=\"assign-answer\" onClick={() => {}}>Assign another Answer to Question</button>\r\n\t\t\t\t}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../reducer';\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tcanEdit: boolean\r\n }\r\n\r\nexport const QuestionForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n      text: props.question.text,\r\n      answers: props.question.answers,\r\n      email: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: values => {\r\n      alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers question={props.question} questionAnswers={props.questionAnswers} canEdit={props.canEdit} />\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\n\r\n// import { IAppState } from '../store/Store';\r\n\r\nimport { IQuestion, IQuestionGroup } from '../reducer';\r\n\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { QuestionForm } from './QuestionForm'\r\n\r\n// import Answers from './Answers'\r\n\r\n// Create the containers interface\r\ninterface IProps {\r\n\tquestionGroups: IQuestionGroup[];\r\n\tquestion?: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tanswers: IAnswer[],\r\n\tcanEdit: boolean\r\n}\r\n\r\n// class QuestionList extends React.Component<IProps> {\r\nconst QuestionList: React.FC<IProps> = (props: IProps) => {\r\n    const { questionGroups, question, questionAnswers, onSelectQuestion, canEdit } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm question={question} questionAnswers={questionAnswers} canEdit={canEdit}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionList\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion } from '../reducer'\r\nimport { IAnswer } from '../../Answers/reducer'\r\n\r\n// import { IQuestion } from '../reducers/questionReducer';\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  getQuestion} from '../actions'  // getAllQuestions, IGetQuestion\r\n\r\nimport QuestionList from '../components/QuestionList'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, props: IProps) => {\r\n  return {\r\n\t questionGroups: store.questionState.questionGroups,\r\n\t question: store.questionState.question,\r\n\t questionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t answers: store.answerState.answers,\r\n\t canEdit: props.canEdit\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);","import * as React from 'react';\nimport '../App.css';\n\nimport QuestionList from '../Questions/containers/QuestionList';\n\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <QuestionList canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../reducer';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\tid=\"answerId\"\r\n\t\t\tname=\"answerId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.answerId}\r\n\t\t\treadOnly\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IAnswer } from '../reducer';\r\nimport { AnswerForm } from './Form'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer, \r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams();\r\n\tslug = ''\r\n\tconst { answers, answer, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => edit(answer.answerId)}><FontAwesomeIcon icon={faEdit} color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(answer.answerId)}><FontAwesomeIcon icon={faWindowClose}  color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Answers\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../reducer'\r\n\r\nimport Answers from '../components/List'\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t answers: store.answerState.answers,\r\n\t answer: store.answerState.answer!,\r\n\t formMode: store.answerState.formMode\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import * as React from 'react';\r\n\r\n// import { IAppState } from '../store/Store';\r\n\r\nimport { IQuestion, IQuestionGroup } from '../reducer';\r\n\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { QuestionForm } from './QuestionForm'\r\n\r\n// import Answers from './Answers'\r\n\r\n// Create the containers interface\r\ninterface IProps {\r\n\tquestionGroups: IQuestionGroup[];\r\n\tquestion?: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tanswers: IAnswer[],\r\n\tcanEdit: boolean\r\n}\r\n\r\nconst Questions: React.FC<IProps> = (props: IProps) => {\r\n    const { questionGroups, question, questionAnswers, onSelectQuestion, canEdit } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm question={question} questionAnswers={questionAnswers} canEdit={canEdit}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups &&\r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.title} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>{questionGroup.title}</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<div key={question.questionId} className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{question.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{/* <h3>All Answers</h3>\r\n\t\t\t\t\t<Answers answers={answers} /> */}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Questions\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion } from '../reducer'\r\nimport { IAnswer } from '../../Answers/reducer'\r\n\r\n// import { IQuestion } from '../reducers/questionReducer';\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  getQuestion} from '../actions'  // getAllQuestions, IGetQuestion\r\n\r\nimport Questions from '../components/Questions'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t questionGroups: store.questionState.questionGroups,\r\n\t question: store.questionState.question,\r\n\t questionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t answers: store.answerState.answers,\r\n\t canEdit: true\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\n\nimport { Provider } from 'react-redux';\n\nimport { Store } from 'redux';\n\nimport configureStore, { IAppState } from './store/Store';\nimport { getAllQuestions } from './Questions/actions';\nimport { getAllAnswers } from './Answers/actions';\n\nimport './index.css';\nimport App from './components/App';\nimport Answers from './Answers/containers/List'\nimport Questions from './Questions/containers/Questions'\n\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n\nconst Root: React.SFC<IProps> = props => {\n\treturn (\n\t\t<Provider store={props.store}>\n\t\t\t<Router>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Supporter</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"push-right\">\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Sign In</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\t\t\t\t\t\n\t\t\t\t</nav>\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<App />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/questions\">\n\t\t\t\t\t\t\t<Questions />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\n\t\t\t\t\t\t\t<Answers />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t{/* <Route\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\n\t\t\t\t\t\t\trender={({ match }) => {\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\t\n\t\t\t</Router>\n\t\t</Provider>\n\t);\n};\n\n\n\n// Generate the store\nconst store = configureStore();\nstore.dispatch(getAllQuestions());\nstore.dispatch(getAllAnswers());\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);"],"sourceRoot":""}
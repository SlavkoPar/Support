{"version":3,"sources":["Questions/actions.ts","Answers/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/Form.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/Form.tsx","Answers/components/List.tsx","Answers/containers/List.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","addQuestionToLocalStorage","question","Promise","resolve","reject","setTimeout","getQuestionGroupFromLocalStorage","storageQuestionsByGroups","getQuestionFromLocalStorage","questionId","undefined","questions","find","updateQuestionFromLocalStorage","removeQuestionFromLocalStorage","groupId","title","text","words","answers","initialQuestion","initialQuestionState","questionGroups","loading","formMode","getAnswersFromLocalStorage","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","options","initialAnswer","initialAnswerState","rootReducer","combineReducers","questionState","state","action","type","GET_ALL_QUESTIONS","section","split","GET_QUESTION","ADD_QUESTION","g","EDIT_QUESTION","STORE_QUESTION","map","q","CANCEL_QUESTION","REMOVE_QUESTION","filter","answerState","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","length","Math","max","a","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","data","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","group","React","QuestionAnswers","questionAnswers","canEdit","onClick","icon","faWindowClose","color","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","handleBlur","disabled","touched","errors","cancel","QuestionsPage","add","edit","remove","style","textAlign","questionGroup","paddingBottom","faEdit","marginLeft","border","borderRadius","padding","marginTop","PromoterPage","joinAnswers","answerIds","includes","mapStateToProps","store","ownProps","mapDispatchToProps","dispatch","async","response","results","console","error","getQuestion","questionGroupId","groups","questionIdMax","editQuestion","removeQuestion","storeQuestion","err","connect","promoter","App","AnswerForm","fromMode","readOnly","Answers","useParams","slug","editAnswer","removeAnswer","storeAnswer","createStore","applyMiddleware","thunk","ReactDOM","to","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.6e9a0445.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup } from './types';\r\nimport { IQuestionState, initialQuestion } from './reducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tquestion: IQuestion\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet questionIdMax = 0;\r\n\t\tfor (let g of groups) {\r\n\t\t\tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\tif (max > questionIdMax)\r\n\t\t\t\tquestionIdMax = max;\r\n\t\t}\r\n\r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_QUESTION,\r\n\t\t  groupId: groupId, \r\n        questionId: questionIdMax + 1\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId); \r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_QUESTION,\r\n        question: response.data.results // answers.find(a => a.questionId === questionId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeQuestionFromLocalStorage(questionId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_QUESTION,\r\n        groupId: groupId,\r\n        questionId: questionId,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addQuestionToLocalStorage(question); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion: question,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateQuestionFromLocalStorage(question); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion\r\n\t\t\t});\r\n\t\t }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst addQuestionToLocalStorage = (question: IQuestion): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': question\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n\r\nconst getQuestionGroupFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageQuestionsByGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of storageQuestionsByGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  }  \r\n\r\n  const updateQuestionFromLocalStorage = (question: IQuestion): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': question\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst removeQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': questionId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n  const storageQuestionsByGroups: IQuestionGroup[] = [\r\n\t{\r\n\t\tgroupId: 11,\r\n\t\ttitle: 'General settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 11,\r\n\t\t\t\tquestionId: 101,\r\n\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t}\r\n\t\t ]\r\n\t\t}, {\r\n\t\t\tgroupId: 22,\r\n\t\t\ttitle: 'Taxes',\r\n\t\t\tquestions: [\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 201,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t\t}, {\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 202,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}, {\r\n\t\t\tgroupId: 33,\r\n\t\t\ttitle: 'Client settings',\r\n\t\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 301,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 302,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 303,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 304,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t\t]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './reducer';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst storageAnswers: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\toptions : []\r\n\t}\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup } from './types'\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: []\r\n };\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  formMode: string;\r\n}\r\n\r\n\r\n// Define the initial state\r\nconst initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\n\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\tconst group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\t/*\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ \r\n\t\t\t\t\t\t...g,\r\n\t\t\t\t\t\tquestions: [...g.questions] \r\n\t\t\t\t\t} : {\r\n\t\t\t\t  \t\t...g, \r\n\t\t\t\t  \t\tquestions: [...g.questions, { ...initialQuestion, questionId: 999 }]\t\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId: action.questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question: {...action.question}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\tlet questionGroups: IQuestionGroup[] = [];\r\n\t\t\t\r\n\t\t\tconst group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t\t \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n} from './actions';\r\n\r\n\r\n// Define the Answer State\r\nexport interface IAnswer {\r\n\tanswerId: number, \r\n\ttext: string;\r\n\toptions?: string[]\r\n}\r\n\r\nexport interface IAnswerState {\r\n\treadonly answers: IAnswer[];\r\n\treadonly answer?: IAnswer;\r\n\tloading: boolean;\r\n\tformMode: string;\r\n}\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\toptions: []\r\n };\r\n\r\n\r\n\r\n // Define the initial state\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n };\r\n \r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n      return {\r\n        ...state,\r\n        answers: action.answers,\r\n      };\r\n\t} \r\n \tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \t\r\n   case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tanswers = [...state.answers, action.answer]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? action.answer : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}    \r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\r\n\tanswerReducer,\r\n\tIAnswerState,\r\n } from '../Answers/reducer';\r\n \r\n \r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tcanEdit: boolean\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n    const { questionAnswers, canEdit } = props;  // question, \r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length > 0 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t{ canEdit && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => {}}>  {/* remove(answer.answerId) */}\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t{ canEdit && \r\n\t\t\t\t\t<button className=\"assign-answer\" onClick={() => {}}>Assign another Answer to Question</button>\r\n\t\t\t\t}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tcancel: () => void;\r\n\tsaveForm: (question: IQuestion, formMode: string) => void;\t\r\n }\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers question={props.question} questionAnswers={props.questionAnswers} canEdit={props.canEdit} />\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\t\t\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\t const { questionGroups, question, questionAnswers, formMode,  onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit } = props;\r\n\r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups &&\r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>{questionGroup.title}</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<div key={question.questionId} className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{question.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => edit(question.groupId, question.questionId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(question.groupId, question.questionId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IQuestion, IQuestionGroup, IComponentProps } from '../types';\r\n\r\nimport { IAnswer } from '../../Answers/reducer';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\t const { questionGroups, question, questionAnswers, formMode,  onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion } from '../types'\r\nimport { IAnswer } from '../../Answers/reducer'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n \t}\r\n}\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\nimport '../App.css';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../reducer';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\tid=\"answerId\"\r\n\t\t\tname=\"answerId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.answerId}\r\n\t\t\treadOnly\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../reducer';\r\nimport { AnswerForm } from './Form'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer, \r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams();\r\n\tslug = ''\r\n\tconst { answers, answer, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => edit(answer.answerId)}><FontAwesomeIcon icon={faEdit} color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(answer.answerId)}><FontAwesomeIcon icon={faWindowClose}  color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Answers\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../reducer'\r\n\r\nimport Answers from '../components/List'\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t answers: store.answerState.answers,\r\n\t answer: store.answerState.answer!,\r\n\t formMode: store.answerState.formMode\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\n\nimport { Provider } from 'react-redux';\n\nimport { Store } from 'redux';\n\nimport configureStore, { IAppState } from './store/Store';\nimport { getAllQuestions } from './Questions/actions';\nimport { getAllAnswers } from './Answers/actions';\n\nimport './index.css';\nimport App from './components/App';\nimport Answers from './Answers/containers/List'\nimport containers from './Questions/containers/Pages'\n\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n\nconst Root: React.SFC<IProps> = props => {\n\treturn (\n\t\t<Provider store={props.store}>\n\t\t\t<Router>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Supporter</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"push-right\">\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Sign In</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\t\t\t\t\t\n\t\t\t\t</nav>\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<App />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/questions\">\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\n\t\t\t\t\t\t\t<Answers />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t{/* <Route\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\n\t\t\t\t\t\t\trender={({ match }) => {\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\t\n\t\t\t</Router>\n\t\t</Provider>\n\t);\n};\n\n\n\n// Generate the store\nconst store = configureStore();\nstore.dispatch(getAllQuestions());\nstore.dispatch(getAllAnswers());\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);"],"sourceRoot":""}
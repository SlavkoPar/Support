{"version":3,"sources":["Questions/actions.ts","Answers/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/Form.tsx","Answers/components/List.tsx","Answers/containers/List.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","isWebStorageSupported","window","delay","Promise","resolve","reject","setTimeout","getQuestionFromLocalStorage","questionId","question","undefined","storageQuestionsByGroups","questions","find","getQuestionGroupsFromLocalStorage","updateGroupFromLocalStorage","group","SUPPORT_QUESTIONS","storageQuestionsByGroupsDemo","groupId","title","text","words","answers","initialQuestion","initialQuestionGroup","initialQuestionState","questionGroups","loading","formMode","groupIdEditing","getAnswersFromLocalStorage","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","SUPPORT_ANSWERS","storageAnswersDemo","options","initialAnswer","initialAnswerState","rootReducer","combineReducers","questionState","state","action","type","GET_ALL_QUESTIONS","section","split","GET_QUESTION","ADD_QUESTION","EDIT_QUESTION","STORE_QUESTION","map","g","q","CANCEL_QUESTION","REMOVE_QUESTION","filter","ADD_GROUP","EDIT_GROUP","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","STORE_QUESTIONS_TO_LOCAL_STORAGE","localStorage","setItem","JSON","stringify","answerState","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","length","Math","max","a","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","STORE_ANSWERS_TO_LOCAL_STORAGE","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","data","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","QuestionAnswers","questionAnswers","canEdit","onClick","icon","faWindowClose","color","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","handleBlur","disabled","style","width","touched","errors","multiple","cancel","DisplayForm","edit","remove","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","parseInt","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","QuestionRow","hoverRef","toString","ref","faEdit","GroupRow","questionGroup","editGroup","removeGroup","QuestionsPage","add","addGroup","storeGroup","inputEl","select","focus","textAlign","paddingBottom","target","defaultValue","marginLeft","border","borderRadius","padding","marginTop","PromoterPage","joinAnswers","answerIds","includes","mapStateToProps","store","ownProps","mapDispatchToProps","dispatch","async","response","results","console","error","getQuestion","questionGroupId","groups","questionIdMax","editQuestion","removeQuestion","storeQuestion","err","connect","promoter","App","AnswerForm","fromMode","readOnly","Answers","useParams","slug","editAnswer","removeAnswer","storeAnswer","createStore","applyMiddleware","thunk","sQuestions","getItem","log","parse","sAnswers","ReactDOM","to","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.c55800fe.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup } from './types';\r\nimport { IQuestionState } from './reducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\t\r\n\t// localSTorage\r\n\tSTORE_QUESTIONS_TO_LOCAL_STORAGE = 'STORE_QUESTIONS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tquestion: IQuestion\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroup: IQuestionGroup\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\nexport interface IStoreQuestionsToLocalStorage {\r\n\ttype: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\t\t\t\t\tIStoreQuestionsToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\tif (sQuestions !== null) {\r\n\t\t\t\tconsole.log('localStorage:', sQuestions);\r\n\t\t\t\tconst questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\t\t\t\tquestionGroups.map(g => storageQuestionsByGroups.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageQuestionsByGroupsDemo.map(g => storageQuestionsByGroups.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageQuestionsByGroupsDemo.map(g => storageQuestionsByGroups.push(g))\r\n\t\t}\r\n\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet questionIdMax = 0;\r\n\t\tfor (let g of groups) {\r\n\t\t\tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\tif (max > questionIdMax)\r\n\t\t\t\tquestionIdMax = max;\r\n\t\t}\r\n\r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_QUESTION,\r\n\t\t  groupId: groupId, \r\n        questionId: questionIdMax + 1\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId); \r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_QUESTION,\r\n        question: response.data.results // answers.find(a => a.questionId === questionId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_QUESTION,\r\n        groupId: groupId,\r\n        questionId: questionId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion: question,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of storageQuestionsByGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 100)\r\n  \t })\r\n  }  \r\n\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAddGroup>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet max = Math.max(...groups.map(g => g.groupId))\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_GROUP,\r\n\t\t  groupId: max + 1, \r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_GROUP,\r\n        group: groups.find(g => g.groupId === groupId)\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after update, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_GROUP,\r\n        groupId: groupId\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait updateGroupFromLocalStorage(group); \r\n\t\tdispatch({\r\n\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\tgroup\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageQuestionsByGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n\t})\r\n}\r\n\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS' \r\n\r\n \r\n// localStorage.removeItem(SUPPORT_QUESTIONS);\r\n  \r\nexport const storageQuestionsByGroups: IQuestionGroup[] = [\r\n]\r\n\r\nexport const storageQuestionsByGroupsDemo: IQuestionGroup[] = [\r\n\t{\r\n\t\tgroupId: 11,\r\n\t\ttitle: 'General settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 11,\r\n\t\t\t\tquestionId: 101,\r\n\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t}\r\n\t\t ]\r\n\t\t}, {\r\n\t\t\tgroupId: 22,\r\n\t\t\ttitle: 'Taxes',\r\n\t\t\tquestions: [\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 201,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t\t}, {\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 202,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}, {\r\n\t\t\tgroupId: 33,\r\n\t\t\ttitle: 'Client settings',\r\n\t\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 301,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 302,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 303,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 304,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t\t]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n  // localSTorage\r\n  STORE_ANSWERS_TO_LOCAL_STORAGE = 'STORE_ANSWERS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\nexport interface IStoreAnswersToLocalStorage {\r\n\ttype: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIStoreAnswersToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\tif (sAnswers !== null) {\r\n\t\t\t\tconsole.log('localStorage:', sAnswers);\r\n\t\t\t\tconst answers: IAnswer[] = JSON.parse(sAnswers);\r\n\t\t\t\tanswers.map(g => storageAnswers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\r\n\t\t}\r\n\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS' \r\n\r\nconst storageAnswers: IAnswer[] = [\r\n]\r\n\r\nconst storageAnswersDemo: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\toptions : []\r\n\t}\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n  SUPPORT_QUESTIONS\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup } from './types'\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: []\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  formMode: string;\r\n  groupIdEditing: number;\r\n}\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId: action.questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question: {...action.question}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: action.groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId: action.groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: action.group.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\tcase QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE: {\r\n\t\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(state.questionGroups));\r\n\t\t\treturn state;\r\n\t\t}   \t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n  SUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport {IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\toptions: []\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n      return {\r\n        ...state,\r\n        answers: action.answers,\r\n      };\r\n\t} \r\n \tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \t\r\n   case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tanswers = [...state.answers, action.answer]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? action.answer : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\treturn state;\r\n\t}   \t\r\n\r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\tanswerReducer } from '../Answers/reducer';\r\nimport {\tIAnswerState } from '../Answers/types';\r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n    const { questionAnswers, canEdit, formMode } = props;  // question, \r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length > 0 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Answers</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => {}}>  {/* remove(answer.answerId) */}\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t<button className=\"assign-answer\" onClick={() => {}}>Assign another Answer to Question</button>\r\n\t\t\t\t}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tcancel: () => void;\r\n\tsaveForm: (question: IQuestion, formMode: string) => void;\t\r\n }\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  multiple\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers question={props.question} questionAnswers={props.questionAnswers} canEdit={props.canEdit} formMode={props.formMode} />\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit && \r\n\t\t\t<button onClick={() => props.cancel()}>Cancel</button>}\r\n\t\t{ props.canEdit && \r\n      \t<button type=\"submit\">Save</button>}\r\n    </form>\r\n  );\r\n};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tedit: () => void;\r\n\tremove: () => void;\r\n }\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers question={props.question} questionAnswers={props.questionAnswers} canEdit={props.canEdit} formMode={props.formMode} />\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\r\n    </form>\r\n  );\r\n};","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tid: number;\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ id: 0, isHovered: false});\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = (id: string) => setValue({ id: parseInt(id), isHovered: true});\r\n\tconst handleMouseOut = (id: string) => setValue({ id: parseInt(id), isHovered: false});\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver(node.id));\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut(node.id));\r\n \r\n\t\t\treturn () => {\r\n\t\t\t  node.removeEventListener('mouseenter', () => handleMouseOver(node.id));\r\n\t\t\t  node.removeEventListener('mouseleave', () => handleMouseOut(node.id));\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\r\n   return (\r\n\t\t<div id={question.questionId.toString()} ref={hoverRef} key={question.questionId} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === question.questionId &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Answer\" onClick={() => edit(question.groupId, question.questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === question.questionId &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(question.groupId, question.questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div id={questionGroup.groupId.toString()} ref={hoverRef} key={questionGroup.groupId} className=\"name\">\r\n\t\t\t{questionGroup.title}\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === questionGroup.groupId&&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === questionGroup.groupId && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\n\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tconst { questionGroups, question, questionAnswers, formMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\t\taddGroup, editGroup, removeGroup, storeGroup } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t { inputEl.current!.select(); inputEl.current!.focus() }\r\n\t}, 100)\r\n\r\n   return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\t question={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t edit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\t remove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\t const { questionGroups, question, questionAnswers, formMode, onSelectQuestion, cancel, saveForm, canEdit } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tgroupIdEditing: store.questionState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group))\r\n \t}\r\n}\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\nimport '../App.css';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\tid=\"answerId\"\r\n\t\t\tname=\"answerId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.answerId}\r\n\t\t\treadOnly\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer, \r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams();\r\n\tslug = ''\r\n\tconst { answers, answer, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => edit(answer.answerId)}><FontAwesomeIcon icon={faEdit} color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(answer.answerId)}><FontAwesomeIcon icon={faWindowClose}  color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Answers\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Answers from '../components/List'\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t answers: store.answerState.answers,\r\n\t answer: store.answerState.answer!,\r\n\t formMode: store.answerState.formMode\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\n\nimport { Provider } from 'react-redux';\n\nimport { Store } from 'redux';\n\nimport configureStore, { IAppState } from './store/Store';\nimport { getAllQuestions } from './Questions/actions';\nimport { getAllAnswers } from './Answers/actions';\n\nimport './index.css';\nimport App from './components/App';\nimport Answers from './Answers/containers/List'\nimport containers from './Questions/containers/Pages'\n\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n\nconst Root: React.SFC<IProps> = props => {\n\treturn (\n\t\t<Provider store={props.store}>\n\t\t\t<Router>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Supporter</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"push-right\">\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Sign In</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\t\t\t\t\t\n\t\t\t\t</nav>\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<App />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/questions\">\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\n\t\t\t\t\t\t\t<Answers />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t{/* <Route\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\n\t\t\t\t\t\t\trender={({ match }) => {\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\t\n\t\t\t</Router>\n\t\t</Provider>\n\t);\n};\n\n// Generate the store\nconst store = configureStore();\nstore.dispatch(getAllQuestions());\nstore.dispatch(getAllAnswers());\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);"],"sourceRoot":""}
{"version":3,"sources":["actions/QuestionActions.ts","actions/AnswerActions.ts","reducers/questionReducer.ts","reducers/answerReducer.ts","store/Store.tsx","components/AutoSuggest.tsx","components/QuestionAnswers.tsx","components/QuestionForm.tsx","components/Answers.tsx","components/QuestionList.tsx","containers/QuestionList.tsx","components/App.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","getQuestionGroupFromLocalStorage","Promise","resolve","reject","setTimeout","questionGroups","getQuestionFromLocalStorage","questionId","question","undefined","questions","find","title","text","words","answers","initialQuestionState","loading","getAnswersFromLocalStorage","answerId","options","initialAnswerState","rootReducer","combineReducers","questionState","state","action","type","GET_ALL_QUESTIONS","section","split","GET_QUESTION","answerState","GET_ALL_ANSWERS","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","data","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","map","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","filter","length","React","QuestionAnswers","questionAnswers","answer","QuestionForm","formik","useFormik","enableReinitialize","initialValues","email","validationSchema","Yup","max","required","onSubmit","values","alert","JSON","stringify","handleSubmit","htmlFor","id","name","handleChange","handleBlur","touched","errors","Answers","QuestionList","style","border","borderRadius","padding","textAlign","questionGroup","paddingBottom","onClick","joinAnswers","answerIds","includes","connect","store","dispatch","a","async","response","results","console","error","getQuestion","App","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d9d2dce3.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup, IQuestionState } from '../reducers/questionReducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n  GET_QUESTION = 'GET_QUESTION',\r\n  GET_ANSWERS = 'GET_ANSWERS'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IQuestionGetAllAction {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGetQuestion {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IQuestionGetAllAction | IGetQuestion;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IQuestionGetAllAction>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGetQuestion>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': questionGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of questionGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n  \t })\r\n  \r\n  }  \r\n\r\n  const questionGroups: IQuestionGroup[] = [\r\n\t{\r\n\t\t title: 'General settings',\r\n\t\t questions: [\r\n\t\t\t  {\r\n\t\t\t\t\tquestionId: 11,\r\n\t\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t  }\r\n\t\t ]\r\n\t}, {\r\n\t\t title: 'Taxes',\r\n\t\t questions: [\r\n\t\t\t  {\r\n\t\t\t\t\tquestionId: 21,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t  }, {\r\n\t\t\t\t\tquestionId: 22,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t  }\r\n\t\t ]\r\n\t}, {\r\n\t\t title: 'Client settings',\r\n\t\t questions: [\r\n\t\t\t{\r\n\t\t\t\tquestionId: 31,\r\n\t\t\t\ttext: 'Does client has promocode',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 32,\r\n\t\t\t\ttext: 'What propocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 33,\r\n\t\t\t\ttext: 'Why taxes are less than 5%',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tquestionId: 34,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t ]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from '../reducers/answerReducer';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IAnswerGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\n export interface IGetAnswer {\r\n\t type: AnswerActionTypes.GET_ANSWER;\r\n\t answer: IAnswer;\r\n }\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IAnswerGetAll | IGetAnswer;\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAnswerGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': answers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\n  const answers: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\toptions : []\r\n\t}\r\n];","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n} from '../actions/QuestionActions';\r\n\r\n// import { IAnswer } from './answerReducer'\r\n\r\n// Define the Question type\r\nexport interface IQuestion {\r\n\tquestionId: number,\r\n\ttext: string,\r\n\twords?: string[],\r\n\tanswers: number[]\r\n}\r\n\r\nexport interface IQuestionGroup {\r\n\ttitle: string;\r\n\tquestions: IQuestion[];\r\n}\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean\r\n}\r\n\r\n// Define the initial state\r\nconst initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false\r\n};\r\n\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\t\t\t \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n} from '../actions/AnswerActions';\r\n\r\n\r\n// Define the Answer State\r\nexport interface IAnswer {\r\n\tanswerId: number, \r\n\ttext: string;\r\n\toptions?: string[]\r\n}\r\n\r\nexport interface IAnswerState {\r\n\treadonly answers: IAnswer[];\r\n\treadonly answer?: IAnswer;\r\n\tloading: boolean\r\n}\r\n\r\n // Define the initial state\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false\r\n };\r\n \r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n      return {\r\n        ...state,\r\n        answers: action.answers,\r\n      };\r\n\t}    \r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../reducers/questionReducer';\r\n\r\nimport {\r\n\tanswerReducer,\r\n\tIAnswerState,\r\n } from '../reducers/answerReducer';\r\n \r\n \r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../reducers/questionReducer'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(section => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\ttitle: section.title,\r\n\t\t\t\t\t\tquestions: section\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\n\r\nimport { IQuestion } from '../reducers/questionReducer';\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[]\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n    const { question, questionAnswers } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length >0 && \r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td key={answer.answerId} className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>edit</td>\r\n\t\t\t\t\t\t\t\t<td>remove</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../reducers/questionReducer';\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n }\r\n\r\nexport const QuestionForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n      text: props.question.text,\r\n      answers: props.question.answers,\r\n      email: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),\r\n    }),\r\n    onSubmit: values => {\r\n      alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers question={props.question} questionAnswers={props.questionAnswers} />\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\n\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[]\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n    const { answers } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>edit</td>\r\n\t\t\t\t\t\t\t\t<td>remove</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Answers\r\n\r\n","import * as React from 'react';\r\n\r\n// import { IAppState } from '../store/Store';\r\n\r\nimport { IQuestion, IQuestionGroup } from '../reducers/questionReducer';\r\n\r\nimport { IAnswer } from '../reducers/answerReducer';\r\n\r\nimport { AutoSuggest } from './AutoSuggest';\r\nimport { QuestionForm } from './QuestionForm'\r\n\r\nimport Answers from './Answers'\r\n\r\n// Create the containers interface\r\ninterface IProps {\r\n\tquestionGroups: IQuestionGroup[];\r\n\tquestion?: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tanswers: IAnswer[]\r\n}\r\n\r\n// class QuestionList extends React.Component<IProps> {\r\nconst QuestionList: React.FC<IProps> = (props: IProps) => {\r\n    const { questionGroups, question, questionAnswers, onSelectQuestion, answers } = props;\r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4>Question</h4>\r\n\t\t\t\t\t\t\t<QuestionForm question={question} questionAnswers={questionAnswers} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups &&\r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.title} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>{questionGroup.title}</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<div key={question.questionId} className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{question.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t<h3>All Answers</h3>\r\n\t\t\t\t\t<Answers answers={answers} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionList\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../store/Store';\r\nimport { IQuestion } from '../reducers/questionReducer'\r\nimport { IAnswer } from '../reducers/answerReducer'\r\n\r\n// import { IQuestion } from '../reducers/questionReducer';\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  getQuestion} from '../actions/QuestionActions'  // getAllQuestions, IGetQuestion\r\n\r\nimport QuestionList from '../components/QuestionList'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t questionGroups: store.questionState.questionGroups,\r\n\t question: store.questionState.question,\r\n\t questionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t answers: store.answerState.answers\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId))\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);","import * as React from 'react';\nimport '../App.css';\n\nimport QuestionList from '../containers/QuestionList';\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <QuestionList />\n    </>\n  );\n};\n\nexport default App;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\n/* Make the store available to all container \ncomponents in the application without passing it explicitly */\nimport { Provider } from 'react-redux';\n\n// Store type from Redux\nimport { Store } from 'redux';\n\n// Import the store function and state\nimport configureStore, { IAppState } from './store/Store';\nimport { getAllQuestions } from './actions/QuestionActions';\nimport { getAllAnswers } from './actions/AnswerActions';\n\nimport './index.css';\nimport App from './components/App';\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n/* \nCreate a root component that receives the store via props\nand wraps the App component with Provider, giving props to containers\n*/\nconst Root: React.SFC<IProps> = props => {\n  return (\n    <Provider store={props.store}>\n      <App />\n    </Provider>\n  );\n};\n\n// Generate the store\nconst store = configureStore();\nstore.dispatch(getAllQuestions());\nstore.dispatch(getAllAnswers());\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);"],"sourceRoot":""}
{"version":3,"sources":["Questions/actions.ts","Answers/actions.ts","Questions/reducer.ts","Answers/reducer.ts","store/Store.tsx","components/AutoSuggest.tsx","Questions/components/QuestionAnswers.tsx","Questions/components/Form.tsx","Questions/components/DisplayForm.tsx","common/useHover.tsx","Questions/components/QuestionRow.tsx","Questions/components/GroupRow.tsx","Questions/components/QuestionsPage.tsx","Questions/components/PromoterPage.tsx","Questions/containers/Pages.tsx","components/App.tsx","Answers/components/Form.tsx","Answers/components/List.tsx","Answers/containers/List.tsx","index.tsx"],"names":["QuestionActionTypes","AnswerActionTypes","isWebStorageSupported","window","reloadQuestionsFromLocalStorage","sQuestions","questionGroups","JSON","parse","storageQuestionsByGroups","getQuestion","questionId","dispatch","a","async","getQuestionFromLocalStorage","response","type","GET_QUESTION","question","data","results","console","error","delay","Promise","resolve","reject","setTimeout","undefined","questions","find","getQuestionGroupsFromLocalStorage","updateGroupFromLocalStorage","group","SUPPORT_QUESTIONS","storageQuestionsByGroupsDemo","groupId","title","text","words","answers","initialQuestion","initialQuestionGroup","initialQuestionState","loading","formMode","groupIdEditing","getAnswersFromLocalStorage","storageAnswers","addAnswerToLocalStorage","answer","updateAnswerFromLocalStorage","removeAnswerFromLocalStorage","answerId","SUPPORT_ANSWERS","storageAnswersDemo","options","initialAnswer","initialAnswerState","rootReducer","combineReducers","questionState","state","action","GET_ALL_QUESTIONS","section","split","ADD_QUESTION","EDIT_QUESTION","STORE_QUESTION","map","g","q","CANCEL_QUESTION","REMOVE_QUESTION","filter","REMOVE_QUESTION_ANSWER","ADD_GROUP","EDIT_GROUP","STORE_GROUP","REMOVE_GROUP","reduce","acc","push","STORE_QUESTIONS_TO_LOCAL_STORAGE","localStorage","setItem","stringify","answerState","GET_ALL_ANSWERS","GET_ANSWER","ADD_ANSWER","length","Math","max","EDIT_ANSWER","STORE_ANSWER","CANCEL_ANSWER","REMOVE_ANSWER","STORE_ANSWERS_TO_LOCAL_STORAGE","QuestionAutosuggestMulti","Autosuggest","AutoSuggest","props","onSuggestionsClearRequested","setState","suggestions","anyWord","valueWordRegex","questionWords","valWordRegex","questionWord","test","value","getSuggestions","highlighted","this","multiSection","onSuggestionsFetchRequested","bind","onSuggestionSelected","getSuggestionValue","renderSuggestion","renderSectionTitle","getSectionSuggestions","onSuggestionHighlighted","highlightFirstSuggestion","renderSuggestionsContainer","inputProps","placeholder","onChange","e","changeEvent","event","suggestion","onSelectQuestion","params","matches","AutosuggestHighlightMatch","query","parts","AutosuggestHighlightParse","part","index","className","highlight","key","onBlur","restInputProps","containerProps","children","newValue","method","escapedValue","trim","replace","word","RegExp","React","QuestionAnswers","questionAnswers","canEdit","removeQuestionAnswer","onClick","stopPropagation","preventDefault","icon","faWindowClose","color","Form","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","onSubmit","values","saveForm","handleSubmit","htmlFor","id","name","handleChange","handleBlur","disabled","style","width","touched","errors","multiple","cancel","DisplayForm","edit","remove","useHover","useState","isHovered","hoverProps","setValue","divRef","useRef","handleMouseOver","parseInt","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","QuestionRow","hoverRef","toString","ref","faEdit","GroupRow","questionGroup","editGroup","removeGroup","QuestionsPage","add","addGroup","storeGroup","inputEl","select","focus","textAlign","paddingBottom","target","defaultValue","marginLeft","border","borderRadius","padding","marginTop","PromoterPage","joinAnswers","answerIds","includes","mapStateToProps","store","ownProps","mapDispatchToProps","questionGroupId","groups","questionIdMax","editQuestion","removeQuestion","storeQuestion","err","connect","promoter","App","AnswerForm","fromMode","readOnly","Answers","useParams","slug","editAnswer","removeAnswer","storeAnswer","createStore","applyMiddleware","thunk","loaded","getItem","sAnswers","log","ReactDOM","to","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.bb650bdc.chunk.js","sourcesContent":["// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Question Typing\r\nimport { IQuestion, IQuestionGroup } from './types';\r\nimport { IQuestionState } from './reducer';\r\n\r\n\r\n// Create Action Constants\r\nexport enum QuestionActionTypes {\r\n\tGET_ALL_QUESTIONS = 'GET_ALL_QUESTIONS',\r\n\tGET_QUESTION = 'GET_QUESTION',\r\n\tADD_QUESTION = 'ADD_QUESTION',\r\n\tEDIT_QUESTION = 'EDIT_QUESTION',\r\n\tREMOVE_QUESTION = 'REMOVE_QUESTION',\r\n\tSTORE_QUESTION = 'STORE_QUESTION',\r\n\tCANCEL_QUESTION = 'CANCEL_QUESTION',\r\n\t// groups\r\n\tADD_GROUP = 'ADD_GROUP',\r\n\tEDIT_GROUP = 'EDIT_GROUP',\r\n\tREMOVE_GROUP = 'REMOVE_GROUP',\r\n\tSTORE_GROUP = 'STORE_GROUP',\r\n\t// question answers\r\n\tREMOVE_QUESTION_ANSWER = 'REMOVE_QUESTION_ANSWER',\r\n\t// localSTorage\r\n\tSTORE_QUESTIONS_TO_LOCAL_STORAGE = 'STORE_QUESTIONS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n  type: QuestionActionTypes.GET_ALL_QUESTIONS;\r\n  questionGroups: IQuestionGroup[];\r\n}\r\n\r\nexport interface IGet {\r\n\ttype: QuestionActionTypes.GET_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: QuestionActionTypes.ADD_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: QuestionActionTypes.EDIT_QUESTION;\r\n\tquestion: IQuestion\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: QuestionActionTypes.STORE_QUESTION;\r\n\tquestion: IQuestion;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: QuestionActionTypes.CANCEL_QUESTION;\r\n}\r\n\r\n// group\r\nexport interface IAddGroup {\r\n\ttype: QuestionActionTypes.ADD_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IEditGroup {\r\n\ttype: QuestionActionTypes.EDIT_GROUP;\r\n\tgroup: IQuestionGroup\r\n}\r\n\r\nexport interface IRemoveGroup {\r\n\ttype: QuestionActionTypes.REMOVE_GROUP;\r\n\tgroupId: number\r\n}\r\n\r\nexport interface IStoreGroup {\r\n\ttype: QuestionActionTypes.STORE_GROUP;\r\n\tgroup: IQuestionGroup;\r\n}\r\n\r\nexport interface IStoreQuestionsToLocalStorage {\r\n\ttype: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE;\r\n}\r\n\r\nexport interface IRemoveQuestionAnswer {\r\n\ttype: QuestionActionTypes.REMOVE_QUESTION_ANSWER;\r\n\tgroupId: number,\r\n\tquestionId: number,\r\n\tanswerId: number\r\n}\r\n\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type QuestionActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIAddGroup | IEditGroup | IRemoveGroup | IStoreGroup |\r\n\t\t\t\t\tIRemoveQuestionAnswer |\r\n\t\t\t\t\tIStoreQuestionsToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllQuestions: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tlet loaded = false;\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sQuestions = localStorage.getItem(SUPPORT_QUESTIONS);\r\n\t\t\tif (sQuestions !== null) {\r\n\t\t\t\t// console.log('localStorage:', sQuestions);\r\n\t\t\t\t// const questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\t\t\t\tstorageQuestionsByGroups = JSON.parse(sQuestions)\r\n\t\t\t\tloaded = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!loaded)\r\n\t\t\tstorageQuestionsByGroups = storageQuestionsByGroupsDemo\r\n\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage(); \r\n      dispatch({\r\n        type: QuestionActionTypes.GET_ALL_QUESTIONS,\r\n        questionGroups: JSON.parse(JSON.stringify(response.data.results)),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const reloadQuestionsFromLocalStorage = (sQuestions: string) => {\r\n\tconst questionGroups: IQuestionGroup[] = JSON.parse(sQuestions);\r\n\tstorageQuestionsByGroups = questionGroups;\r\n}\r\n\r\n// Get Question <Promise<Return Type>, State Interface, Type of Param, Type of Action> \r\nexport const getQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, string, IGet>\r\n> = (questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId);\r\n      dispatch({\r\n\t\t\ttype: QuestionActionTypes.GET_QUESTION,\r\n\t\t\tquestion: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const addQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAdd>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet questionIdMax = 0;\r\n\t\tfor (let g of groups) {\r\n\t\t\tlet max = Math.max(...g.questions.map(q => q.questionId))\r\n\t\t\tif (max > questionIdMax)\r\n\t\t\t\tquestionIdMax = max;\r\n\t\t}\r\n\r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_QUESTION,\r\n\t\t  groupId: groupId, \r\n        questionId: questionIdMax + 1\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEdit>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionFromLocalStorage(questionId); \r\n\t\t// const answers: IQuestion[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_QUESTION,\r\n        question: response.data.results // answers.find(a => a.questionId === questionId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemove>\r\n> = (groupId: number, questionId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_QUESTION,\r\n        groupId: groupId,\r\n        questionId: questionId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeQuestionAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveQuestionAnswer>\r\n> = (groupId: number, questionId: number, answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.REMOVE_QUESTION_ANSWER,\r\n\t\t  groupId: groupId,\r\n        questionId: questionId,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n\t\tdispatch<any>(getQuestion(questionId))\t// refresh state of question\r\n\t\t} catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeQuestion: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStore>\r\n> = (question: IQuestion, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion: question,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait delay();\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: QuestionActionTypes.STORE_QUESTION,\r\n\t\t\t\tquestion\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst delay = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': 1\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nexport const cancelQuestion: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: QuestionActionTypes.CANCEL_QUESTION\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n\r\n\r\n  const getQuestionFromLocalStorage = (questionId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tlet question = undefined;\r\n\t\t\tfor (let section of storageQuestionsByGroups) {\r\n\t\t\t\tquestion = section\r\n\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t.find(question => question.questionId === questionId);\r\n\t\t\t\tif (question !== undefined)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// assert q !== undefined\r\n\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': question\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 100)\r\n  \t })\r\n  }  \r\n\r\n\r\n\r\nexport const addGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IAddGroup>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tlet max = Math.max(...groups.map(g => g.groupId))\r\n      dispatch({\r\n\t\t  type: QuestionActionTypes.ADD_GROUP,\r\n\t\t  groupId: max + 1, \r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IEditGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\tconst response = await getQuestionGroupsFromLocalStorage();\r\n\t\tconst groups: IQuestionGroup[] = response.data.results;\r\n\t\tconst group = groups.find(g => g.groupId === groupId)\r\n      dispatch({\r\n        type: QuestionActionTypes.EDIT_GROUP,\r\n        group: JSON.parse(JSON.stringify(group))\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IRemoveGroup>\r\n> = (groupId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait delay()\r\n\t\t// warning: store answer, after update, to local storage\r\n      dispatch({\r\n        type: QuestionActionTypes.REMOVE_GROUP,\r\n        groupId: groupId\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const storeGroup: ActionCreator<\r\n  ThunkAction<Promise<any>, IQuestionState, null, IStoreGroup>\r\n> = (group: IQuestionGroup) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait updateGroupFromLocalStorage(group); \r\n\t\tdispatch({\r\n\t\t\ttype: QuestionActionTypes.STORE_GROUP,\r\n\t\t\tgroup\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE });\t\t\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nconst getQuestionGroupsFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageQuestionsByGroups\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 250)\r\n\t})\r\n}\r\n\r\n\r\nconst updateGroupFromLocalStorage = (group: IQuestionGroup): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': group\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_QUESTIONS = 'SUPPORT_QUESTIONS' \r\n\r\n \r\n// localStorage.removeItem(SUPPORT_QUESTIONS);\r\n  \r\nexport let storageQuestionsByGroups: IQuestionGroup[] = [\r\n]\r\n\r\nexport const storageQuestionsByGroupsDemo: IQuestionGroup[] = [\r\n\t{\r\n\t\tgroupId: 11,\r\n\t\ttitle: 'General settings',\r\n\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 11,\r\n\t\t\t\tquestionId: 101,\r\n\t\t\t\ttext: 'Why promocode hasn\\'t been applied?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 112, 114]\r\n\t\t\t}\r\n\t\t ]\r\n\t\t}, {\r\n\t\t\tgroupId: 22,\r\n\t\t\ttitle: 'Taxes',\r\n\t\t\tquestions: [\r\n\t\t\t\t{\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 201,\r\n\t\t\t\t\ttext: 'Which promocode do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: []\r\n\t\t\t\t}, {\r\n\t\t\t\t\tgroupId: 22,\r\n\t\t\t\t\tquestionId: 202,\r\n\t\t\t\t\ttext: 'Which promocode for client do we apply?',\r\n\t\t\t\t\twords : [],\r\n\t\t\t\t\tanswers: [111]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}, {\r\n\t\t\tgroupId: 33,\r\n\t\t\ttitle: 'Client settings',\r\n\t\t\tquestions: [\r\n\t\t\t{\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 301,\r\n\t\t\t\ttext: 'Does client has promocode?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [222]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 302,\r\n\t\t\t\ttext: 'What promocode do we use?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 303,\r\n\t\t\t\ttext: 'Why taxes are less than 5%?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [111, 114]\r\n\t\t\t}, {\r\n\t\t\t\tgroupId: 33,\r\n\t\t\t\tquestionId: 304,\r\n\t\t\t\ttext: 'When do we do something?',\r\n\t\t\t\twords : [],\r\n\t\t\t\tanswers: [113]\r\n\t\t\t}\r\n\t\t\t]\r\n\t}\r\n];","// Import redux types\r\nimport { ActionCreator, Dispatch } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\n// import axios from 'axios';\r\n\r\n// Import Answer Typing\r\nimport { IAnswer, IAnswerState } from './types';\r\n\r\n// Create Action Constants\r\nexport enum AnswerActionTypes {\r\n  GET_ALL_ANSWERS = 'GET_ALL_ANSWERS',\r\n  GET_ANSWER = 'GET_ANSWER',\r\n  ADD_ANSWER = 'ADD_ANSWER',\r\n  EDIT_ANSWER = 'EDIT_ANSWER',\r\n  REMOVE_ANSWER = 'REMOVE_ANSWER',\r\n  STORE_ANSWER = 'STORE_ANSWER',\r\n  CANCEL_ANSWER = 'CANCEL_ANSWER',\r\n  // localSTorage\r\n  STORE_ANSWERS_TO_LOCAL_STORAGE = 'STORE_ANSWERS_TO_LOCAL_STORAGE'\r\n}\r\n\r\n// Interface for Get All Action Type\r\nexport interface IGetAll {\r\n\ttype: AnswerActionTypes.GET_ALL_ANSWERS;\r\n\tanswers: IAnswer[];\r\n }\r\n \r\nexport interface IGet {\r\n\ttype: AnswerActionTypes.GET_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IAdd {\r\n\ttype: AnswerActionTypes.ADD_ANSWER;\r\n}\r\n\r\nexport interface IEdit {\r\n\ttype: AnswerActionTypes.EDIT_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface IRemove {\r\n\ttype: AnswerActionTypes.REMOVE_ANSWER;\r\n\tanswerId: number;\r\n}\r\n\r\nexport interface IStore {\r\n\ttype: AnswerActionTypes.STORE_ANSWER;\r\n\tanswer: IAnswer;\r\n}\r\n\r\nexport interface ICancel {\r\n\ttype: AnswerActionTypes.CANCEL_ANSWER;\r\n}\r\n\r\nexport interface IStoreAnswersToLocalStorage {\r\n\ttype: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE;\r\n}\r\n\r\n// Combine the action types with a union (we assume there are more)\r\nexport type AnswerActions = IGetAll | IGet | IAdd | IEdit | IRemove | IStore | ICancel |\r\n\t\t\t\t\tIStoreAnswersToLocalStorage;\r\n\r\nconst isWebStorageSupported = () => 'localStorage' in window\r\n\r\n// Get All Action <Promise<Return Type>, State Interface, Type of Param, Type of Action>\r\nexport const getAllAnswers: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = () => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\r\n\t\tif (isWebStorageSupported()) {\r\n\t\t\tconst sAnswers = localStorage.getItem(SUPPORT_ANSWERS);\r\n\t\t\tif (sAnswers !== null) {\r\n\t\t\t\tconsole.log('localStorage:', sAnswers);\r\n\t\t\t\tconst answers: IAnswer[] = JSON.parse(sAnswers);\r\n\t\t\t\tanswers.map(g => storageAnswers.push(g))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstorageAnswersDemo.map(g => storageAnswers.push(g))\r\n\t\t}\r\n\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ALL_ANSWERS,\r\n        answers: response.data.results,\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const addAnswer: ActionCreator<any> = () => {\r\n  return (dispatch: Dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: AnswerActionTypes.ADD_ANSWER\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGet>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\r\n      dispatch({\r\n        type: AnswerActionTypes.GET_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const editAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IEdit>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tconst response = await getAnswersFromLocalStorage(); \r\n\t\tconst answers: IAnswer[] = response.data.results;\r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.EDIT_ANSWER,\r\n        answer: answers.find(a => a.answerId === answerId),\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const removeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IGetAll>\r\n> = (answerId: number) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\tawait removeAnswerFromLocalStorage(answerId); \r\n\t\t// warning: store answer, after upodate, to local storage\r\n      dispatch({\r\n        type: AnswerActionTypes.REMOVE_ANSWER,\r\n        answerId: answerId,\r\n\t\t});\r\n\t\tif (isWebStorageSupported())\r\n\t\t\tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const storeAnswer: ActionCreator<\r\n  ThunkAction<Promise<any>, IAnswerState, null, IAdd>\r\n> = (answer: IAnswer, formMode: string) => {\r\n  return async (dispatch: Dispatch) => {\r\n    try {\r\n\t\t if (formMode === 'add') {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait addAnswerToLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer: answer,\r\n\t\t\t});\r\n\t\t }\r\n\t\t else {\r\n\t\t\t// const response = await axios.get('https://swapi.co/api/people/');\r\n\t\t\tawait updateAnswerFromLocalStorage(answer); \r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AnswerActionTypes.STORE_ANSWER,\r\n\t\t\t\tanswer\r\n\t\t\t});\r\n\t\t }\r\n\t\t if (isWebStorageSupported())\r\n\t\t \tdispatch({type: AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE });\t\t \r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n};\r\n\r\nexport const cancelAnswer: ActionCreator<any> = () => {\r\n\treturn (dispatch: Dispatch) => {\r\n\t  try {\r\n\t\t dispatch({\r\n\t\t\ttype: AnswerActionTypes.CANCEL_ANSWER\r\n\t\t });\r\n\t  } catch (err) {\r\n\t\t console.error(err);\r\n\t  }\r\n\t};\r\n };\r\n \r\n\r\nconst getAnswersFromLocalStorage = (): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n  \t\t  resolve({\r\n  \t\t\t 'status': 200,\r\n  \t\t\t 'content-type': 'application/json',\r\n  \t\t\t 'data' : {\r\n  \t\t\t\t'results': storageAnswers\r\n  \t\t\t }\r\n  \t\t  })\r\n  \t\t}, 50)\r\n  \t })\r\n  \r\n  }\r\n\r\nconst addAnswerToLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\nconst updateAnswerFromLocalStorage = (answer: IAnswer): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answer\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n\r\nconst removeAnswerFromLocalStorage = (answerId: number): Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tresolve({\r\n\t\t\t\t'status': 200,\r\n\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t'data' : {\r\n\t\t\t\t'results': answerId\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}, 50)\r\n\t})\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n// localStorage\r\n \r\nexport const SUPPORT_ANSWERS = 'SUPPORT_ANSWERS' \r\n\r\nconst storageAnswers: IAnswer[] = [\r\n]\r\n\r\nconst storageAnswersDemo: IAnswer[] = [\r\n\t{\r\n\t\tanswerId: 111,\r\n\t\ttext: 'You should do the following',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 112,\r\n\t\ttext: 'Also do the rest of important',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t},\t{\r\n\t\tanswerId: 113,\r\n\t\ttext: 'Try something else',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}, {\r\n\t\tanswerId: 114,\r\n\t\ttext: 'Contact our support',\r\n\t\twords: [],\r\n\t\toptions : []\r\n\t}\r\n];\r\n\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\n\r\nimport {\r\n  QuestionActions,\r\n  QuestionActionTypes,\r\n  SUPPORT_QUESTIONS,\r\n  reloadQuestionsFromLocalStorage\r\n} from './actions';\r\n\r\nimport { IQuestion, IQuestionGroup } from './types'\r\n\r\nexport const initialQuestion: IQuestion = {\r\n\tgroupId: 0,\r\n\tquestionId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\tanswers: []\r\n };\r\n\r\n export const initialQuestionGroup: IQuestionGroup = {\r\n\tgroupId: 0,\r\n\ttitle: '',\r\n\tquestions: []\r\n };\r\n\r\n\r\n// Define the Question State\r\nexport interface IQuestionState {\r\n  readonly questionGroups: IQuestionGroup[];\r\n  readonly question: IQuestion | undefined;\r\n  loading: boolean,\r\n  formMode: string;\r\n  groupIdEditing: number;\r\n}\r\n\r\n\r\n// Define the initial state\r\nexport const initialQuestionState: IQuestionState = {\r\n\tquestionGroups: [],\r\n\tquestion: undefined,\r\n\tloading: false,\r\n\tformMode: 'display',\r\n\tgroupIdEditing: 0,\r\n};\r\n\r\n\r\n/*\r\nconst getQuestion = (\r\n\t\t\tquestionGroups: IQuestionGroup[], \r\n\t\t\tgroupId: number, \r\n\t\t\tquestionId: number) : IQuestion|undefined => {\r\n\tconst group = questionGroups.find(g => g.groupId === groupId)\r\n\tif (!group)\r\n\t\treturn undefined;\r\n\r\n\tconst question = group\r\n\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t.find(q => q.questionId === questionId);\r\n\treturn question;\r\n}\r\n*/\r\n\r\n\r\nexport const questionReducer: Reducer<IQuestionState, QuestionActions> = (\r\n  state = initialQuestionState,\r\n  action\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase QuestionActionTypes.GET_ALL_QUESTIONS: {\r\n\t\t\t\r\n\t\t\tfor (let section of action.questionGroups)\r\n\t\t\t\tfor (let question of section.questions) \r\n\t\t\t\t\tquestion.words = question.text.split(' ');\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestionGroups: action.questionGroups,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.GET_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tquestion: action.question,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.ADD_QUESTION: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tformMode: 'add',\r\n\t\t\t\tquestion: {...initialQuestion, groupId: action.groupId, questionId: action.questionId }\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'edit',\r\n\t\t\t  question: {...action.question}\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_QUESTION: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\tif (state.formMode === 'add') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions, { ...action.question }]\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tformMode: 'edit',\r\n\t\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.question.groupId ? \r\n\t\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...g, questions: g.questions\r\n\t\t\t\t\t\t\t\t\t\t.map(q => q.questionId !== action.question.questionId ? \r\n\t\t\t\t\t\t\t\t\t\t\tq : { ...action.question }\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)};\r\n\t\t\t}\r\n\t\t}    \r\n\r\n\t\tcase QuestionActionTypes.CANCEL_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  formMode: 'display',\r\n\t\t\t  question: undefined,\r\n\t\t\t  questionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.filter(q => q.questionId !== action.questionId)\t}\r\n\t\t\t\t)\r\n\t\t\t};\r\n\t\t}   \r\n\r\n\t\t// Question answers\r\n\t\tcase QuestionActionTypes.REMOVE_QUESTION_ANSWER: {\r\n\t\t\t return {\r\n\t\t\t   ...state,\r\n\t\t\t   // formMode: 'display',\r\n\t\t\t  \t// question: undefined,\r\n\t\t\t  \tquestionGroups: state.questionGroups.map(g => g.groupId !== action.groupId ? \r\n\t\t\t\t\t{ ...g, questions: [...g.questions] } \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, questions: g.questions.map(q => q.questionId !== action.questionId ?\r\n\t\t\t\t\t\t{ ...q, answers: [...q.answers] } \r\n\t\t\t\t\t\t: \r\n\t\t\t\t\t\t{ ...q, answers: q.answers.filter(answerId => answerId !== action.answerId) }\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}   \r\n\r\n\t\t///////////////////////////////////////////////////////////////////////////////////\r\n\t\t// groups\r\n\r\n\t\tcase QuestionActionTypes.ADD_GROUP: {\r\n\t\t\t// const group =  state.questionGroups.find(g => g.groupId === action.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: action.groupId,\r\n\t\t\t\tquestionGroups: [...state.questionGroups, { ...initialQuestionGroup, title: \"New Section\", groupId: action.groupId }]\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tcase QuestionActionTypes.EDIT_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  ...state,\r\n\t\t\t  groupIdEditing: action.group.groupId\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcase QuestionActionTypes.STORE_GROUP: {\r\n\t\t\t// const group = state.questionGroups.find(g => g.groupId === action.question.groupId);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgroupIdEditing: 0,\r\n\t\t\t\tquestionGroups: state.questionGroups.map(g => g.groupId !== action.group.groupId ? \r\n\t\t\t\t\tg \r\n\t\t\t\t\t: \r\n\t\t\t\t\t{ ...g, title: action.group.title }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}    \r\n\t\r\n\t\tcase QuestionActionTypes.REMOVE_GROUP: {\r\n\t\t\treturn {\r\n\t\t\t  \t...state,\r\n\t\t\t  \tquestionGroups: state.questionGroups.reduce((acc: IQuestionGroup[], g) => {\r\n\t\t\t\t\tif (g.groupId !== action.groupId)\r\n\t\t\t\t\t\tacc.push({ ...g, questions: [...g.questions]})\r\n\t\t\t\t\treturn acc\r\n\t\t\t  \t}, [])\r\n\t\t\t};\r\n\t\t}   \t\t\r\n\t\t\t \r\n\t\tcase QuestionActionTypes.STORE_QUESTIONS_TO_LOCAL_STORAGE: {\r\n\t\t\tlocalStorage.setItem(SUPPORT_QUESTIONS, JSON.stringify(state.questionGroups));\r\n\t\t\treloadQuestionsFromLocalStorage(JSON.stringify(state.questionGroups));\r\n\t\t\treturn state;\r\n\t\t}   \t\t\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n","// Import Reducer type\r\nimport { Reducer } from 'redux';\r\nimport {\r\n  AnswerActions,\r\n  AnswerActionTypes,\r\n  SUPPORT_ANSWERS\r\n} from './actions';\r\n\r\nimport {IAnswer, IAnswerState } from './types'\r\n\r\nconst initialAnswer: IAnswer = {\r\n\tanswerId: 0,\r\n\ttext: '',\r\n\twords: [],\r\n\toptions: []\r\n};\r\n\r\nconst initialAnswerState: IAnswerState = {\r\n\tanswers: [],\r\n\tloading: false,\r\n\tformMode: 'display'\r\n};\r\n\r\n\r\nexport const answerReducer: Reducer<IAnswerState, AnswerActions> = (\r\n  state = initialAnswerState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n\r\n\r\n   case AnswerActionTypes.GET_ALL_ANSWERS: {\r\n\t\treturn {\r\n        ...state,\r\n        answers: action.answers.map(answer => { return {...answer, words: answer.text.split(' ')} }),\r\n      };\r\n\t} \r\n \tcase AnswerActionTypes.GET_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n        answer: action.answer\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.ADD_ANSWER: {\r\n      return {\r\n\t\t  \t...state,\r\n\t\t  \tformMode: 'add',\r\n        \tanswer: { \r\n\t\t\t  ...initialAnswer, \r\n\t\t\t  answerId: state.answers.length === 0 ? 1 : Math.max(...state.answers.map(a => a.answerId)) + 1,\r\n\t\t\t}\r\n      };\r\n\t}    \t\r\n   case AnswerActionTypes.EDIT_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answer: { ...action.answer, words: action.answer.text.split(' ')}\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.STORE_ANSWER: {\r\n\t\tlet answers = [];\r\n\t\tif (state.formMode === 'add') {\r\n\t\t\tanswers = [...state.answers, { ...action.answer, words:  action.answer.text.split(' ')}]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tanswers = state.answers.map(a => a.answerId === action.answer.answerId ? { ...action.answer, words:  action.answer.text.split(' ')} : a)\r\n\t\t}\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'edit',\r\n        answers: answers\r\n      };\r\n\t}    \r\n\tcase AnswerActionTypes.CANCEL_ANSWER: {\r\n      return {\r\n        ...state,\r\n\t\t  formMode: 'display',\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.REMOVE_ANSWER: {\r\n      return {\r\n\t\t  ...state,\r\n\t\t  formMode: 'display',\r\n\t\t  answers: state.answers.filter(a => a.answerId !== action.answerId)\r\n      };\r\n\t}\r\n\r\n\tcase AnswerActionTypes.STORE_ANSWERS_TO_LOCAL_STORAGE: {\r\n\t\tlocalStorage.setItem(SUPPORT_ANSWERS, JSON.stringify(state.answers));\r\n\t\treturn state;\r\n\t}   \t\r\n\r\n\tdefault:\r\n   \treturn state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport {\r\n  questionReducer,\r\n  IQuestionState,\r\n} from '../Questions/reducer';\r\n\r\nimport {\tanswerReducer } from '../Answers/reducer';\r\nimport {\tIAnswerState } from '../Answers/types';\r\n\r\n\r\nexport interface IAppState {\r\n  questionState: IQuestionState;\r\n  answerState: IAnswerState;\r\n}\r\n\r\n// Create the root reducer\r\nconst rootReducer = combineReducers<IAppState>({\r\n  questionState: questionReducer,\r\n  answerState: answerReducer\r\n});\r\n\r\n// Create a configure store function of type `IAppState`\r\nexport default function configureStore(): Store<IAppState, any> {\r\n  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));\r\n  return store;\r\n}","import * as React from 'react';\r\n\r\nimport Autosuggest from 'react-autosuggest';\r\nimport AutosuggestHighlightMatch from \"autosuggest-highlight/match\";\r\nimport AutosuggestHighlightParse from \"autosuggest-highlight/parse\";\r\n\r\n\r\nimport { IQuestion, IQuestionGroup }  from '../Questions/types'\r\nimport './AutoSuggest.css'\r\n\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expression\r\n// s#Using_Special_Characters\r\nfunction escapeRegexCharacters(str: string): string {\r\n\treturn str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\n\r\n\r\nconst QuestionAutosuggestMulti = Autosuggest as { new (): Autosuggest<IQuestion, IQuestionGroup> };\r\n\r\n\r\nexport class AutoSuggest extends React.Component<{questionGroups: IQuestionGroup[], onSelectQuestion: (questionId: number) => void }, any> {\r\n\t// region Fields\r\n\r\n\tstate: any;\r\n\t// endregion region Constructor\r\n\tconstructor(props: any) {\r\n\t\t super(props);\r\n\r\n\t\t this.state = {\r\n\t\t\t  value: '',\r\n\t\t\t  suggestions: this.getSuggestions(''),\r\n\t\t\t  highlighted: ''\r\n\t\t };\r\n\t}\r\n\t// endregion region Rendering methods\r\n\trender(): JSX.Element {\r\n\t\t const {value, suggestions} = this.state;\r\n\r\n\t\t return <QuestionAutosuggestMulti\r\n\t\t \t  onSuggestionsClearRequested={this.onSuggestionsClearRequested}  // (sl) added\r\n\t\t\t  multiSection={true}\r\n\t\t\t  suggestions={suggestions}\r\n\t\t\t  onSuggestionsFetchRequested={this.onSuggestionsFetchRequested.bind(this)}\r\n\t\t\t  onSuggestionSelected={this.onSuggestionSelected.bind(this)}\r\n\t\t\t  getSuggestionValue={this.getSuggestionValue}\r\n\t\t\t  renderSuggestion={this.renderSuggestion}\r\n\t\t\t  renderSectionTitle={this.renderSectionTitle}\r\n\t\t\t  getSectionSuggestions={this.getSectionSuggestions}\r\n\t\t\t  // onSuggestionHighlighted={this.onSuggestionHighlighted} (sl)\r\n\t\t\t  onSuggestionHighlighted={this.onSuggestionHighlighted.bind(this)}  \r\n\t\t\t  highlightFirstSuggestion={true}\r\n\t\t\t  // renderInputComponent={this.renderInputComponent}\r\n\t\t\t  renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n\t\t\t  inputProps={{\r\n\t\t\t\t\tplaceholder: `Type 'promocode'`,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tonChange: (e, changeEvent) => this.onChange(e, changeEvent),\r\n\t\t\t  }}/>;\r\n\t}\r\n\r\n\tprotected onSuggestionsClearRequested = () => {\r\n\t\tthis.setState({\r\n\t\t  suggestions: []\r\n\t\t});\r\n\t };\r\n  \r\n  \r\n\r\n\tprotected onSuggestionSelected(event: React.FormEvent<any>, data: Autosuggest.SuggestionSelectedEventData<IQuestion>): void {\r\n\t\t const question: IQuestion = data.suggestion;\r\n\t\t // alert(`Selected question is ${question.questionId} (${question.text}).`);\r\n\t\t this.props.onSelectQuestion(question.questionId);\r\n\t}\r\n\r\n\t/*\r\n\tprotected renderSuggestion(suggestion: Question, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t return <span className={className}>{suggestion.name}</span>;\r\n\t}\r\n\t*/\r\n\r\n\tprotected renderSuggestion(suggestion: IQuestion, params: Autosuggest.RenderSuggestionParams): JSX.Element {\r\n\t\t// const className = params.isHighlighted ? \"highlighted\" : undefined;\r\n\t\t//return <span className={className}>{suggestion.name}</span>;\r\n\t\tconst matches = AutosuggestHighlightMatch(suggestion.text, params.query);\r\n\t\tconst parts = AutosuggestHighlightParse(suggestion.text, matches);\r\n\t \r\n\t\treturn (\r\n\t\t  <span>\r\n\t\t\t {parts.map((part, index) => {\r\n\t\t\t\tconst className = part.highlight ? 'react-autosuggest__suggestion-match' : undefined;\r\n\t \r\n\t\t\t\treturn (\r\n\t\t\t\t  <span className={className} key={index}>\r\n\t\t\t\t\t {part.text}\r\n\t\t\t\t  </span>\r\n\t\t\t\t);\r\n\t\t\t })}\r\n\t\t  </span>\r\n\t\t);\r\n\t}\r\n\r\n\tprotected renderSectionTitle(section: IQuestionGroup): JSX.Element {\r\n\t\t return <strong>{section.title}</strong>;\r\n\t}\r\n\r\n\tprotected renderInputComponent(inputProps: Autosuggest.InputProps<IQuestion>): JSX.Element {\r\n\t\t const { onChange, onBlur, ...restInputProps } = inputProps;\r\n\t\t return (\r\n\t\t\t  <div>\r\n\t\t\t\t\t<input {...restInputProps} />\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\r\n\tprotected renderSuggestionsContainer({containerProps, children, query}: Autosuggest.RenderSuggestionsContainerParams): JSX.Element {\r\n\t\t return (\r\n\t\t\t  <div {...containerProps}>\r\n\t\t\t\t\t<span>{children}</span>\r\n\t\t\t  </div>\r\n\t\t );\r\n\t}\r\n\t// endregion region Event handlers\r\n\tprotected onChange(event: React.FormEvent<any>, {newValue, method}: Autosuggest.ChangeEvent): void {\r\n\t\t this.setState({value: newValue});\r\n\t}\r\n\r\n\tprotected onSuggestionsFetchRequested({value}: any): void {\r\n\t\t this.setState({\r\n\t\t\t  suggestions: this.getSuggestions(value)\r\n\t\t });\r\n\t}\r\n\r\n\tprivate anyWord = (valueWordRegex: RegExp[], questionWords: string[]) : boolean => {\r\n\t\tfor (let valWordRegex of valueWordRegex)\r\n\t\t\tfor (let questionWord of questionWords)\r\n\t\t\t\tif (valWordRegex.test(questionWord))\r\n\t\t\t\t\treturn true;\r\n\t\treturn false;\r\n\t} \r\n\t// endregion region Helper methods\r\n\tprotected getSuggestions(value: string): IQuestionGroup[] {\r\n\t\tconst escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n\t\tif (escapedValue === '') {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tconst valueWords = escapedValue.split(' ');\r\n\t\tconst valueWordRegex = valueWords.map(word => new RegExp(word, 'i') )\r\n\t\t// const regex = new RegExp('^' + escapedValue, 'i');\r\n\t\t// const regex = new RegExp(escapedValue, 'i');\r\n\r\n\t\t// return AutoSuggest.questions\t \r\n\t\t//  return this.props.questionGroups\r\n\t\t// \t\t.map(section => {\r\n\t\t// \t\t\treturn {\r\n\t\t// \t\t\t\t\ttitle: section.title,\r\n\t\t// \t\t\t\t\tquestions: section\r\n\t\t// \t\t\t\t\t\t.questions\r\n\t\t// \t\t\t\t\t\t.filter(question => regex.test(question.text))\r\n\t\t// \t\t\t};\r\n\t\t// \t\t})\r\n\t\t// \t\t.filter(section => section.questions.length > 0);\r\n\r\n\t\treturn this.props.questionGroups\r\n\t\t\t.map(group => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupId: group.groupId,\r\n\t\t\t\t\t\ttitle: group.title,\r\n\t\t\t\t\t\tquestions: group\r\n\t\t\t\t\t\t\t\t\t\t.questions\r\n\t\t\t\t\t\t\t\t\t\t.filter(question => this.anyWord(valueWordRegex, question.words!))\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t\t.filter(section => section.questions.length > 0);\r\n\t}\r\n\r\n\tprotected getSuggestionValue(suggestion: IQuestion) {\r\n\t\t return suggestion.text;\r\n\t}\r\n\r\n\tprotected getSectionSuggestions(section: IQuestionGroup) {\r\n\t\t return section.questions;\r\n\t}\r\n\r\n\tprotected onSuggestionHighlighted(params: Autosuggest.SuggestionHighlightedParams): void {\r\n\t\t this.setState({\r\n\t\t\t  highlighted: params.suggestion\r\n\t\t });\r\n\t}\r\n\t// endregion\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n// import { AutoSuggestAnswer } from '../../components/AutoSuggestAnswer';\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion,\r\n\tquestionAnswers: IAnswer[],\r\n\tcanEdit: boolean,\r\n\tformMode: string,\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void\r\n}\r\n\r\nconst QuestionAnswers: React.FC<IProps> = (props: IProps) => {\r\n    const { question, questionAnswers, canEdit, formMode, removeQuestionAnswer } = props;  // question, \r\n    return (\r\n      <div className=\"name-container\">\r\n\t\t\t{ questionAnswers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers yet\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ questionAnswers.length > 0 && \r\n\t\t\t\t<>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Answers</th>\r\n\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' && <th></th> }\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</thead>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{ questionAnswers.map(answer => \r\n\t\t\t\t\t\t\t<tr key={answer.answerId}>\r\n\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" \r\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => { \r\n\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveQuestionAnswer(question.groupId, question.questionId, answer.answerId)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{canEdit && <tr>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t{/* <AutoSuggestAnswer /> */}\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t{ canEdit && formMode !== 'display' &&\r\n\t\t\t\t\t<button className=\"assign-answer\" onClick={() => {}}>Assign another Answer</button>\r\n\t\t\t\t}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default QuestionAnswers\r\n\r\n","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tcancel: () => void;\r\n\tsaveForm: (question: IQuestion, formMode: string) => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void \t\r\n }\r\n\r\nexport const Form: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  multiple\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers \r\n\t\t\tquestion={props.question} \r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t\tremoveQuestionAnswer={props.removeQuestionAnswer}\r\n\t\t/>\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit && \r\n\t\t\t<button onClick={() => props.cancel()}>Cancel</button>}\r\n\t\t{ props.canEdit && \r\n      \t<button type=\"submit\">Save</button>}\r\n    </form>\r\n  );\r\n};","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IQuestion } from '../types';\r\nimport { IAnswer } from '../../Answers/types';\r\n\r\nimport QuestionAnswers from './QuestionAnswers'\r\n\r\ninterface IProps {\r\n\tquestion: IQuestion;\r\n\tquestionAnswers: IAnswer[];\r\n\tformMode: string;\r\n\tcanEdit: boolean,\r\n\tedit: () => void;\r\n\tremove: () => void;\r\n\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => void \t\r\n }\r\n\r\nexport const DisplayForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\t enableReinitialize: true,\r\n    initialValues: {\r\n\t\tgroupId: props.question.groupId,\r\n\t\tquestionId: props.question.questionId,\r\n      text: props.question.text,\r\n      answers: props.question.answers\r\n    },\r\n    validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n      /*answers: Yup.string()\r\n        .max(20, 'Must be 20 characters or less')\r\n        .required('Required'),\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required('Required'),*/\r\n    }),\r\n    onSubmit: values => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\r\n\t\t<label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"questionId\"\r\n        name=\"questionId\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.questionId}\r\n\t\t  disabled\r\n\t\t  style={{width: '50px'}}\r\n      />\r\n      {formik.touched.questionId && formik.errors.questionId ? (\r\n        <div>{formik.errors.questionId}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n\t\t  value={formik.values.text}\r\n\t\t  disabled\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t<br />\r\n\t\t<QuestionAnswers\r\n\t\t\tquestion={props.question}\r\n\t\t\tquestionAnswers={props.questionAnswers}\r\n\t\t\tcanEdit={props.canEdit}\r\n\t\t\tformMode={props.formMode}\r\n\t\t\tremoveQuestionAnswer={props.removeQuestionAnswer}\r\n\t\t/>\r\n\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n      {/* <button type=\"submit\">Submit</button> */}\r\n\t\t{ props.canEdit &&\r\n\t\t\t<>\r\n\t\t\t<button onClick={() => props.edit()}>Edit</button>\r\n\t\t\t<button onClick={() => props.remove()}>Remove</button>\r\n\t\t\t</>\r\n\t\t}\r\n    </form>\r\n  );\r\n};","import { useRef, useState, useEffect } from 'react';\r\n\r\ninterface IHoverProps {\r\n\tid: number;\r\n\tisHovered: boolean;\r\n}\r\n\r\n// Hook\r\nexport function useHover() : [React.RefObject<HTMLDivElement>, IHoverProps] {\r\n\tconst [hoverProps, setValue] = useState({ id: 0, isHovered: false});\r\n \r\n\tconst divRef = useRef<HTMLDivElement>(null);\r\n \r\n\tconst handleMouseOver = (id: string) => setValue({ id: parseInt(id), isHovered: true});\r\n\tconst handleMouseOut = (id: string) => setValue({ id: parseInt(id), isHovered: false});\r\n \r\n\tuseEffect(\r\n\t  () => {\r\n\t\t const node = divRef.current;\r\n\t\t if (node) {\r\n\t\t\tnode.addEventListener('mouseenter', () => handleMouseOver(node.id));\r\n\t\t\tnode.addEventListener('mouseleave', () => handleMouseOut(node.id));\r\n \r\n\t\t\treturn () => {\r\n\t\t\t  node.removeEventListener('mouseenter', () => handleMouseOver(node.id));\r\n\t\t\t  node.removeEventListener('mouseleave', () => handleMouseOut(node.id));\r\n\t\t\t};\r\n\t\t }\r\n\t  }, [divRef.current] // Recall only if ref changes\r\n\t);\r\n \r\n\treturn [divRef, hoverProps];\r\n}\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestion: IQuestion;\r\n\tonSelectQuestion: (questionId: number) => IQuestion;\r\n\tedit: (groupId: number, questionId: number) => void;\r\n\tremove: (groupId: number, questionId: number) => void;\r\n}\r\n\r\nconst QuestionRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { question, onSelectQuestion, edit, remove } = props;\r\n\r\n   return (\r\n\t\t<div id={question.questionId.toString()} ref={hoverRef} key={question.questionId} className=\"name\">\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"question-button\"\r\n\t\t\t\tonClick={() => onSelectQuestion(question.questionId)}>\r\n\t\t\t\t{question.text}\r\n\t\t\t</button>\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === question.questionId &&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Answer\" onClick={() => edit(question.groupId, question.questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === question.questionId &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(question.groupId, question.questionId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default QuestionRow\r\n\r\n","import * as React from 'react';\r\n\r\nimport { useHover } from '../../common/useHover'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IQuestionGroup } from '../types';\r\n\r\n\r\ninterface IQuestionRowProps {\r\n\tquestionGroup: IQuestionGroup;\r\n\teditGroup: (groupId: number) => void;\r\n\tremoveGroup: (groupId: number) => void;\r\n}\r\n\r\nconst GroupRow: React.FC<IQuestionRowProps> = (props: IQuestionRowProps) => {\r\n\r\n\tconst [hoverRef, hoverProps] = useHover();\r\n\tconst { questionGroup, editGroup, removeGroup } = props;\r\n\r\n   return (\r\n\t\t<div id={questionGroup.groupId.toString()} ref={hoverRef} key={questionGroup.groupId} className=\"name\">\r\n\t\t\t{questionGroup.title}\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === questionGroup.groupId&&\r\n\t\t\t\t<button className=\"button-edit\" title=\"Edit Section\" onClick={() => editGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faEdit} color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\t\t\t\r\n\t\t\t{hoverProps.isHovered && hoverProps.id === questionGroup.groupId && questionGroup.questions.length === 0 &&\r\n\t\t\t\t<button className=\"button-remove\" title=\"Remove Section\" onClick={() => removeGroup(questionGroup.groupId)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faWindowClose}  color='lightblue' />\r\n\t\t\t\t</button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GroupRow\r\n\r\n","import * as React from 'react';\r\nimport { useRef } from 'react'\r\n\r\nimport { IComponentProps } from '../types'\r\n\r\nimport { IQuestion } from '../types';\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\nimport { DisplayForm } from './DisplayForm'\r\nimport QuestionRow from './QuestionRow';\r\nimport GroupRow from './GroupRow';\r\n\r\n\r\nconst QuestionsPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\r\n\tconst { questionGroups, question, questionAnswers, formMode, groupIdEditing, onSelectQuestion, add, edit, remove, cancel, saveForm, canEdit,\r\n\t\t\t\taddGroup, editGroup, removeGroup, storeGroup,\r\n\t\t\t\tremoveQuestionAnswer } = props;\r\n\r\n\tconst inputEl = useRef<HTMLInputElement>(null);\r\n\tsetTimeout(() => { \r\n\t\tif (inputEl.current !== null)\t {\r\n\t\t\tinputEl.current!.select();\r\n\t\t\tinputEl.current!.focus()\r\n\t\t}\r\n\t}, 100)\r\n\r\n   return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<hr />\r\n\r\n\t\t\t<h4 style={{textAlign: 'center'}}>Maintenance (visible only for Admins) </h4>\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<h3>All Questions by sections</h3>\r\n\t\t\t\t\t{questionGroups && \r\n\t\t\t\t\t\tquestionGroups.map(questionGroup => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={questionGroup.groupId} style={{ paddingBottom: '5px'}}>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing === questionGroup.groupId && \r\n\t\t\t\t\t\t\t\t\t\t\t<input ref={inputEl} name=\"groupTitle\" type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\t\tonBlur={(e) => storeGroup({...questionGroup, title: e.target.value})}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdefaultValue={questionGroup.title}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t{groupIdEditing !== questionGroup.groupId && (\r\n\t\t\t\t\t\t\t\t\t\t\t<GroupRow \r\n\t\t\t\t\t\t\t\t\t\t\t\tquestionGroup={questionGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\teditGroup={editGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveGroup={removeGroup}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t{questionGroup.questions.map(question => \r\n\t\t\t\t\t\t\t\t\t\t\t<QuestionRow\r\n\t\t\t\t\t\t\t\t\t\t\t\t question={question}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onSelectQuestion={onSelectQuestion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t edit={edit}\r\n\t\t\t\t\t\t\t\t\t\t\t\t remove={remove}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<div style={{marginLeft: '5%'}}>\r\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"button-add\" title=\"Add a new Question\" onClick={() => add(questionGroup.groupId)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAdd a new Question\r\n\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t\t<div style={{ marginLeft: '1%' }}>\r\n\t\t\t\t\t\t<button className=\"button-add-group\" title=\"Add a new Section\" onClick={() => addGroup()}>\r\n\t\t\t\t\t\t\tAdd a new Section\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t{ formMode === 'display' ?\r\n\t\t\t\t\t\t\t\t<DisplayForm\r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tedit={() => edit(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremove={() => remove(question.groupId, question.questionId)}\r\n\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n      </div>\r\n   );\r\n  }\r\n\r\nexport default QuestionsPage\r\n\r\n","import * as React from 'react';\r\n\r\nimport { IQuestion, IComponentProps } from '../types';\r\n\r\n\r\nimport { AutoSuggest } from '../../components/AutoSuggest';\r\nimport { Form } from './Form'\r\n\r\n\r\nconst PromoterPage: React.FC<IComponentProps> = (props: IComponentProps) => {\r\n\t const { questionGroups, question, questionAnswers, formMode, onSelectQuestion, cancel, saveForm, canEdit,\r\n\t\tremoveQuestionAnswer } = props;\r\n\t \r\n    return (\r\n      <div className=\"name-container\">\r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<AutoSuggest questionGroups={questionGroups} onSelectQuestion={onSelectQuestion}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{questionGroups && question &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Question</h4>\r\n\t\t\t\t\t\t\t<Form \r\n\t\t\t\t\t\t\t\tquestion={question}\r\n\t\t\t\t\t\t\t\tquestionAnswers={questionAnswers}\r\n\t\t\t\t\t\t\t\tformMode={formMode}\r\n\t\t\t\t\t\t\t\tcancel={cancel}\r\n\t\t\t\t\t\t\t\tsaveForm={(question: IQuestion) => saveForm(question, formMode)}\r\n\t\t\t\t\t\t\t\tcanEdit={canEdit}\r\n\t\t\t\t\t\t\t\tremoveQuestionAnswer={removeQuestionAnswer}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default PromoterPage\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\nimport { IQuestion, IQuestionGroup } from '../types'\r\nimport { IAnswer } from '../../Answers/types'\r\n\r\nimport { Dispatch } from 'redux';  // ActionCreatorsMapObject, \r\n\r\nimport { QuestionActions,  \r\n\tgetQuestion, \r\n\taddQuestion, \r\n\teditQuestion,\r\n\tremoveQuestion,\r\n\tstoreQuestion,\r\n\tcancelQuestion,\r\n\taddGroup,\r\n\teditGroup,\r\n\tremoveGroup,\r\n\tstoreGroup,\r\n\tremoveQuestionAnswer\r\n} from '../actions'\r\n\r\nimport QuestionsPage from '../components/QuestionsPage'\r\nimport PromoterPage from '../components/PromoterPage'\r\n\r\n\r\nconst joinAnswers = (question: IQuestion | undefined, answers: IAnswer[]) : IAnswer[]=> {\r\n\tif (question === undefined || question.answers.length === 0 || answers === undefined)\r\n\t\treturn [];\r\n\tconst answerIds = question.answers; \r\n\treturn answers.filter(answer => answerIds.includes(answer.answerId));\r\n}\r\n\r\ninterface IProps {\r\n\tcanEdit: boolean\r\n}\r\n\r\n// Grab the questions from the store and make them available on props\r\nconst mapStateToProps = (store: IAppState, ownProps: IProps ) => {\r\n\treturn {\r\n\t\tquestionGroups: store.questionState.questionGroups,\r\n\t\tquestion: store.questionState.question!,\r\n\t\tquestionAnswers: joinAnswers(store.questionState.question, store.answerState.answers),\r\n\t\tanswers: store.answerState.answers,\r\n\t\tformMode: store.questionState.formMode,\r\n\t\tgroupIdEditing: store.questionState.groupIdEditing,\r\n\t\tcanEdit: ownProps.canEdit,\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<QuestionActions>) => {\r\n\treturn {\r\n\t\tonSelectQuestion: (questionId: number) => dispatch<any>(getQuestion(questionId)),\r\n\t\tadd: (questionGroupId: number) => dispatch<any>(addQuestion(questionGroupId)),\r\n\t\tedit: (questionGroupId: number, questionId: number) => dispatch<any>(editQuestion(questionGroupId, questionId)),\r\n\t\tremove: (questionGroupId: number, questionId: number) => dispatch<any>(removeQuestion(questionGroupId, questionId)),\r\n\t\tsaveForm: (question: IQuestion, formMode: string) => dispatch<any>(storeQuestion(question, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelQuestion()),\r\n\r\n\t\t// groups\r\n\t\taddGroup: () => dispatch<any>(addGroup()),\r\n\t\teditGroup: (groupId: number) =>  dispatch<any>(editGroup(groupId)),\r\n\t\tremoveGroup: (groupId: number) => dispatch<any>(removeGroup(groupId)),\r\n\t\tstoreGroup: (group: IQuestionGroup) => dispatch<any>(storeGroup(group)),\r\n\r\n\t\t// question answers\r\n\t\tremoveQuestionAnswer: (groupId: number, questionId: number, answerId: number) => \r\n\t\t\tdispatch<any>(removeQuestionAnswer(groupId, questionId, answerId))\r\n\t}\r\n}\r\n\r\nexport default {\r\n\tquestions: connect(mapStateToProps, mapDispatchToProps)(QuestionsPage),\r\n\tpromoter: connect(mapStateToProps, mapDispatchToProps)(PromoterPage)\r\n};","import * as React from 'react';\nimport '../App.css';\n\nimport containers from '../Questions/containers/Pages'\n\n// type TParams = { id: string };\n\n// function Product({ match }: RouteComponentProps<TParams>) {\n//   return <h2>This is a page for product with ID: {match.params.id} </h2>;\n// }\n\nconst App: React.SFC<{}> = () => {\n  return (\n    <>\n      <h2 style={{textAlign: 'center'}}>Questions &amp; Answers</h2>\n      <containers.promoter canEdit={false} />\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport { IAnswer } from '../types';\r\n\r\n\r\ninterface IProps {\r\n\tanswer: IAnswer;\r\n\tformMode: string;\r\n\toptions?: string[],\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n }\r\n\r\nexport const AnswerForm: React.FC<IProps> = (props: IProps) => {\r\n  const formik = useFormik({\r\n\tenableReinitialize: true,\r\n   initialValues: {\r\n\t\tfromMode: props.formMode,\r\n      answerId: props.answer.answerId,\r\n\t\ttext: props.answer.text,\r\n\t\toptions: props.answer.options\r\n   },\r\n   validationSchema: Yup.object({\r\n      text: Yup.string()\r\n        .max(150, 'Must be 150 characters or less')\r\n        .required('Required'),\r\n   }),\r\n   onSubmit: (values) => {\r\n\t\t// alert(JSON.stringify(values, null, 2));\r\n\t\tprops.saveForm(values, props.formMode)\r\n   },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n\t\t { props.formMode !== 'add' && \r\n\t\t <>\r\n\t\t\t<label htmlFor=\"answerId\"></label>\r\n\t\t\t<input\r\n\t\t\tid=\"answerId\"\r\n\t\t\tname=\"answerId\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tonChange={formik.handleChange}\r\n\t\t\tonBlur={formik.handleBlur}\r\n\t\t\tvalue={formik.values.answerId}\r\n\t\t\treadOnly\r\n\t\t\t/>\r\n\t\t\t{formik.touched.answerId && formik.errors.answerId ? (\r\n\t\t\t<div>{formik.errors.answerId}</div>\r\n\t\t\t) : null}\r\n\t\t\t</>\r\n\t\t}\r\n\r\n      <label htmlFor=\"text\"></label>\r\n      <input\r\n        id=\"text\"\r\n        name=\"text\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.text}\r\n      />\r\n      {formik.touched.text && formik.errors.text ? (\r\n        <div>{formik.errors.text}</div>\r\n      ) : null}\r\n\t\t\r\n\t\t{/* \r\n      <label htmlFor=\"answers\">Answers</label>\r\n      <input\r\n        id=\"answers\"\r\n        name=\"answers\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.answers}\r\n      />\r\n      {formik.touched.answers && formik.errors.answers ? (\r\n        <div>{formik.errors.answers}</div>\r\n      ) : null}\r\n\r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        value={formik.values.email}\r\n      />\r\n      {formik.touched.email && formik.errors.email ? (\r\n        <div>{formik.errors.email}</div>\r\n      ) : null} */}\r\n\r\n\t\t<button onClick={() => props.cancel()}>Cancel</button>\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom' // useRouteMatch\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose, faEdit } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { IAnswer } from '../types';\r\nimport { AnswerForm } from './Form'\r\n\r\ninterface IProps {\r\n\tanswers: IAnswer[],\r\n\tanswer: IAnswer, \r\n\r\n\tformMode: string,\r\n\tadd: () => void;\r\n\tedit: (answerId: number) => void;\r\n\tremove: (answerId: number) => void;\r\n\tcancel: () => void;\r\n\tsaveForm: (answer: IAnswer, formMode: string) => void;\r\n}\r\n\r\nconst Answers: React.FC<IProps> = (props: IProps) => {\r\n\tlet { slug } = useParams();\r\n\tslug = ''\r\n\tconst { answers, answer, formMode, add, edit, remove, cancel, saveForm } = props;\r\n\treturn (\r\n\t\t<div className=\"name-container\">\r\n\t\t\t{slug}\r\n\t\t\t{ answers.length === 0 && \r\n\t\t\t\t<div>\r\n\t\t\t\t\tNo answers at all\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{ answers.length > 0 && \r\n\r\n\t\t\t<div className=\"two-columns\">\r\n\t\t\t\t<div className=\"a\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Id</th>\r\n\t\t\t\t\t\t\t\t<th>Answer</th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ answers.map(answer => \r\n\t\t\t\t\t\t\t\t<tr key={answer.answerId} >\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.answerId}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td className=\"name\">\r\n\t\t\t\t\t\t\t\t\t\t{answer.text}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-edit\" title=\"Add a new Answer\" onClick={() => edit(answer.answerId)}><FontAwesomeIcon icon={faEdit} color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t\t<td><button className=\"button-remove\" title=\"Remove Answer\" onClick={() => remove(answer.answerId)}><FontAwesomeIcon icon={faWindowClose}  color='lightblue' /></button></td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<button onClick={() => add()}>Add new</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"b\">\r\n\t\t\t\t\t{formMode === 'add' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>New Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{formMode === 'edit' &&\r\n\t\t\t\t\t\t<div style={{border: '1px solid silver', borderRadius: '5px', padding: '10px'}}>\r\n\t\t\t\t\t\t\t<h4 style={{marginTop: 0}}>Edit Answer</h4>\r\n\t\t\t\t\t\t\t<AnswerForm answer={answer} formMode={formMode} cancel={cancel} saveForm={(answer: IAnswer) => saveForm(answer, formMode)} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t);\r\n  }\r\n\r\nexport default Answers\r\n\r\n","// import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { IAppState } from '../../store/Store';\r\n\r\nimport { AnswerActions,  addAnswer, editAnswer, removeAnswer, storeAnswer, cancelAnswer } from '../actions' // , IAddAnswer\r\n\r\nimport { IAnswer } from '../types'\r\n\r\nimport Answers from '../components/List'\r\n\r\nconst mapStateToProps = (store: IAppState) => {\r\n  return {\r\n\t answers: store.answerState.answers,\r\n\t answer: store.answerState.answer!,\r\n\t formMode: store.answerState.formMode\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnswerActions>) => {\r\n\treturn {\r\n\t\t//setFormMode: (formMode: string) => dispatch<any>(setFormMode(formMode)),\r\n\t\tadd: () => dispatch<any>(addAnswer()),\r\n\t\tedit: (answerId: number) => dispatch<any>(editAnswer(answerId)),\r\n\t\tremove: (answerId: number) => dispatch<any>(removeAnswer(answerId)),\r\n\t\tsaveForm: (answer: IAnswer, formMode: string) => dispatch<any>(storeAnswer(answer, formMode)),\r\n\t\tcancel: () => dispatch<any>(cancelAnswer()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);","import React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom' // useRouteMatch\n\nimport { Provider } from 'react-redux';\n\nimport { Store } from 'redux';\n\nimport configureStore, { IAppState } from './store/Store';\nimport { getAllQuestions } from './Questions/actions';\nimport { getAllAnswers } from './Answers/actions';\n\nimport './index.css';\nimport App from './components/App';\nimport Answers from './Answers/containers/List'\nimport containers from './Questions/containers/Pages'\n\n\ninterface IProps {\n  store: Store<IAppState>;\n}\n\n\nconst Root: React.SFC<IProps> = props => {\n\treturn (\n\t\t<Provider store={props.store}>\n\t\t\t<Router>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Supporter</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/questions\">Questions</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Answers</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className=\"push-right\">\n\t\t\t\t\t\t\t<Link to=\"/answers/pera\">Sign In</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\t\t\t\t\t\n\t\t\t\t</nav>\n\t\t\t\t<div>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<App />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/questions\">\n\t\t\t\t\t\t\t<containers.questions canEdit={true} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/answers/:slug\">\n\t\t\t\t\t\t\t<Answers />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t{/* <Route\n\t\t\t\t\t\t\tpath=\"/blog2/:slug\"\n\t\t\t\t\t\t\trender={({ match }) => {\n\t\t\t\t\t\t\t\t// Do whatever you want with the match...\n\t\t\t\t\t\t\t\treturn <div>{match}</div>;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\t\n\t\t\t</Router>\n\t\t</Provider>\n\t);\n};\n\n// Generate the store\nconst store = configureStore();\nstore.dispatch(getAllQuestions());\nstore.dispatch(getAllAnswers());\n\n// Render the App\nReactDOM.render(<Root store={store} />, document.getElementById(\n  'root'\n) as HTMLElement);"],"sourceRoot":""}